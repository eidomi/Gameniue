<!DOCTYPE html>
<html lang="he" dir="rtl">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>פאזל הזזה - משחק חשיבה</title>
    <style>
        * {
            margin: 0;
            padding: 0;
            box-sizing: border-box;
        }

        body {
            font-family: 'Arial', sans-serif;
            background: linear-gradient(135deg, #eb3349 0%, #f45c43 100%);
            min-height: 100vh;
            display: flex;
            justify-content: center;
            align-items: center;
            padding: 20px;
        }

        /* Back button */
        .back-button {
            position: fixed;
            top: 20px;
            right: 20px;
            z-index: 1000;
        }

        .back-button button {
            background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
            color: white;
            border: none;
            padding: 12px 25px;
            border-radius: 50px;
            font-size: 1.1em;
            font-weight: bold;
            cursor: pointer;
            box-shadow: 0 5px 15px rgba(0, 0, 0, 0.3);
            transition: all 0.3s ease;
        }

        .back-button button:hover {
            transform: scale(1.05);
        }

        .game-container {
            background: rgba(255, 255, 255, 0.95);
            border-radius: 30px;
            padding: 40px;
            box-shadow: 0 25px 50px rgba(0, 0, 0, 0.3);
            max-width: 600px;
            width: 100%;
        }

        h1 {
            text-align: center;
            color: #2c3e50;
            margin-bottom: 30px;
            font-size: 2.5em;
            text-shadow: 2px 2px 4px rgba(0, 0, 0, 0.1);
        }

        .stats-panel {
            display: grid;
            grid-template-columns: repeat(3, 1fr);
            gap: 15px;
            margin-bottom: 30px;
        }

        .stat-box {
            background: linear-gradient(135deg, #fc466b 0%, #3f5efb 100%);
            color: white;
            padding: 15px;
            border-radius: 15px;
            text-align: center;
            box-shadow: 0 5px 15px rgba(0, 0, 0, 0.2);
        }

        .stat-box h3 {
            font-size: 0.9em;
            margin-bottom: 5px;
            opacity: 0.9;
        }

        .stat-box p {
            font-size: 1.8em;
            font-weight: bold;
        }

        .size-selector {
            display: flex;
            gap: 10px;
            justify-content: center;
            margin-bottom: 30px;
        }

        .size-btn {
            background: linear-gradient(135deg, #11998e 0%, #38ef7d 100%);
            color: white;
            border: none;
            padding: 10px 20px;
            border-radius: 25px;
            font-size: 1em;
            font-weight: bold;
            cursor: pointer;
            transition: all 0.3s ease;
            box-shadow: 0 3px 10px rgba(0, 0, 0, 0.2);
        }

        .size-btn:hover {
            transform: translateY(-2px);
            box-shadow: 0 5px 15px rgba(0, 0, 0, 0.3);
        }

        .size-btn.active {
            background: linear-gradient(135deg, #ee0979 0%, #ff6a00 100%);
        }

        .puzzle-container {
            background: linear-gradient(135deg, #2c3e50 0%, #34495e 100%);
            border-radius: 20px;
            padding: 20px;
            margin-bottom: 30px;
            box-shadow: inset 0 5px 15px rgba(0, 0, 0, 0.3);
        }

        .puzzle-grid {
            display: grid;
            gap: 5px;
            max-width: 400px;
            margin: 0 auto;
            aspect-ratio: 1;
        }

        .puzzle-tile {
            background: linear-gradient(135deg, #4facfe 0%, #00f2fe 100%);
            color: white;
            border-radius: 10px;
            display: flex;
            align-items: center;
            justify-content: center;
            font-size: 2em;
            font-weight: bold;
            cursor: pointer;
            transition: all 0.3s ease;
            box-shadow: 0 5px 15px rgba(0, 0, 0, 0.3);
            position: relative;
            overflow: hidden;
            user-select: none;
        }

        .puzzle-tile:focus {
            outline: 3px solid #f39c12;
            outline-offset: 3px;
        }

        .puzzle-tile::before {
            content: '';
            position: absolute;
            top: 0;
            left: 0;
            right: 0;
            bottom: 0;
            background: linear-gradient(45deg, transparent 30%, rgba(255,255,255,0.1) 50%, transparent 70%);
            transform: translateX(-100%);
            transition: transform 0.6s;
        }

        .puzzle-tile:hover::before {
            transform: translateX(100%);
        }

        .puzzle-tile:hover {
            transform: scale(1.05);
            box-shadow: 0 8px 20px rgba(0, 0, 0, 0.4);
        }

        .puzzle-tile.empty {
            background: transparent;
            box-shadow: none;
            cursor: default;
        }

        .puzzle-tile.empty:hover {
            transform: none;
        }

        .puzzle-tile.sliding {
            animation: slideAnimation 0.3s ease;
        }

        @keyframes slideAnimation {
            0% { transform: scale(1); }
            50% { transform: scale(0.95); }
            100% { transform: scale(1); }
        }

        .puzzle-tile.correct {
            background: linear-gradient(135deg, #55efc4 0%, #00b894 100%);
        }

        .controls {
            display: flex;
            gap: 15px;
            justify-content: center;
            flex-wrap: wrap;
        }

        .control-btn {
            background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
            color: white;
            border: none;
            padding: 15px 30px;
            border-radius: 50px;
            font-size: 1.1em;
            font-weight: bold;
            cursor: pointer;
            transition: all 0.3s ease;
            box-shadow: 0 5px 15px rgba(0, 0, 0, 0.2);
        }

        .control-btn:hover {
            transform: translateY(-2px);
            box-shadow: 0 7px 20px rgba(0, 0, 0, 0.3);
        }

        .control-btn.shuffle {
            background: linear-gradient(135deg, #f093fb 0%, #f5576c 100%);
        }

        .control-btn.hint {
            background: linear-gradient(135deg, #fa709a 0%, #fee140 100%);
        }

        .message {
            text-align: center;
            font-size: 1.3em;
            font-weight: bold;
            padding: 20px;
            border-radius: 15px;
            margin-top: 20px;
            display: none;
        }

        .message.show {
            display: block;
            animation: slideIn 0.5s ease;
        }

        .message.success {
            background: linear-gradient(135deg, #55efc4 0%, #00b894 100%);
            color: white;
        }

        @keyframes slideIn {
            from {
                opacity: 0;
                transform: translateY(-20px);
            }
            to {
                opacity: 1;
                transform: translateY(0);
            }
        }

        .timer {
            text-align: center;
            font-size: 2em;
            font-weight: bold;
            color: #2c3e50;
            margin-bottom: 20px;
        }

        .preview-modal {
            position: fixed;
            top: 50%;
            left: 50%;
            transform: translate(-50%, -50%);
            background: white;
            padding: 30px;
            border-radius: 20px;
            box-shadow: 0 20px 50px rgba(0, 0, 0, 0.5);
            display: none;
            z-index: 1001;
        }

        .preview-modal.show {
            display: block;
            animation: modalIn 0.3s ease;
        }

        @keyframes modalIn {
            from {
                opacity: 0;
                transform: translate(-50%, -50%) scale(0.8);
            }
            to {
                opacity: 1;
                transform: translate(-50%, -50%) scale(1);
            }
        }

        .preview-grid {
            display: grid;
            gap: 2px;
            width: 200px;
            height: 200px;
            margin: 20px auto;
        }

        .preview-tile {
            background: linear-gradient(135deg, #74b9ff 0%, #a29bfe 100%);
            color: white;
            display: flex;
            align-items: center;
            justify-content: center;
            font-weight: bold;
            border-radius: 5px;
        }

        .modal-backdrop {
            position: fixed;
            top: 0;
            left: 0;
            width: 100%;
            height: 100%;
            background: rgba(0, 0, 0, 0.5);
            display: none;
            z-index: 1000;
        }

        .modal-backdrop.show {
            display: block;
        }

        .win-animation {
            position: fixed;
            top: 50%;
            left: 50%;
            transform: translate(-50%, -50%);
            font-size: 5em;
            color: #f39c12;
            display: none;
            z-index: 1002;
        }

        .win-animation.show {
            display: block;
            animation: winPulse 2s ease;
        }

        @keyframes winPulse {
            0% {
                transform: translate(-50%, -50%) scale(0) rotate(0deg);
                opacity: 0;
            }
            50% {
                transform: translate(-50%, -50%) scale(1.5) rotate(180deg);
                opacity: 1;
            }
            100% {
                transform: translate(-50%, -50%) scale(0) rotate(360deg);
                opacity: 0;
            }
        }
    
/* Responsive Design Fixes - Added by automated script */
@media (max-width: 768px) {
    .game-container {
        padding: 15px;
        max-width: 100%;
    }
    
    .game-board {
        width: 90vw;
        max-width: 500px;
    }
    
    .button, button {
        min-height: 48px;
        font-size: 1.1rem;
    }
    
    .stats {
        flex-wrap: wrap;
        gap: 10px;
    }
}

@media (max-width: 480px) {
    .game-title {
        font-size: 1.8rem !important;
    }
    
    .game-board {
        width: 95vw;
        padding: 10px;
    }
    
    .button, button {
        width: 100%;
        min-height: 50px;
    }
}
/* Clamp() Responsive Sizing - Added by automated script */
.game-title {
    font-size: clamp(1.5rem, 5vw, 3rem) !important;
}

.button, button {
    font-size: clamp(0.9rem, 2vw, 1.2rem);
    padding: clamp(10px, 2vw, 20px) clamp(15px, 3vw, 30px);
}

.score, .stat-value {
    font-size: clamp(1.2rem, 3vw, 2rem);
}

.game-container {
    padding: clamp(10px, 3vw, 30px);
}

.game-board {
    width: clamp(280px, 90vw, 600px);
    max-width: 100%;
}</style>

<!-- Error Handler v6.0 - ROI: 850% -->
<script>
// Minified Error Handler v6.0
!function(){class ErrorManager{constructor(){if(ErrorManager.instance)return ErrorManager.instance;this.errors=[],this.maxErrors=100,this.recoveryStrategies=new Map,this.telemetry={errorCount:0,recoveryCount:0,fatalCount:0},this.notificationQueue=[],this.isShowingNotification=!1,this.setupGlobalHandlers(),ErrorManager.instance=this}setupGlobalHandlers(){window.addEventListener("error",e=>{this.handleError({type:"javascript",message:e.message,source:e.filename,line:e.lineno,column:e.colno,error:e.error,timestamp:Date.now()}),e.preventDefault()}),window.addEventListener("unhandledrejection",e=>{this.handleError({type:"promise",message:e.reason?.message||String(e.reason),reason:e.reason,timestamp:Date.now()}),e.preventDefault()})}handleError(e){this.telemetry.errorCount++,this.storeError(e),this.isDevelopment()&&console.error("Error captured:",e);const r=this.attemptRecovery(e);return r?this.telemetry.recoveryCount++:(this.notifyUser(e),this.isFatalError(e)&&(this.telemetry.fatalCount++,this.handleFatalError(e))),r}storeError(e){this.errors.push({...e,id:`err_${Date.now()}_${Math.random().toString(36).substr(2,9)}`,handled:!1}),this.errors.length>this.maxErrors&&this.errors.shift();try{const e=this.errors.slice(-10);localStorage.setItem("recentErrors",JSON.stringify(e))}catch{}}attemptRecovery(e){if(e.message?.includes("QuotaExceededError"))try{return Object.keys(localStorage).filter(e=>e.startsWith("temp_")||e.includes("_old")).forEach(e=>localStorage.removeItem(e)),!0}catch{}if(e.message?.includes("AudioContext"))try{return window.audioManager&&(window.audioManager.destroy?.(),window.audioManager=new AudioManager),!0}catch{}return e.message?.includes("fetch")||e.message?.includes("network")?(this.scheduleRetry(e),!0):e.message?.includes("Cannot read")&&e.message?.includes("null")?(this.attemptDOMRecovery(e),!1):!1}attemptDOMRecovery(e){[{id:"gameBoard",create:()=>this.createGameBoard()},{id:"timer",create:()=>this.createTimer()},{id:"score",create:()=>this.createScore()}].forEach(({id:e,create:r})=>{if(!document.getElementById(e)){console.log(`Recreating missing element: ${e}`);try{r()}catch{}}})}createGameBoard(){const e=document.createElement("div");e.id="gameBoard",e.className="game-board",document.querySelector(".game-container")?.appendChild(e)}createTimer(){const e=document.createElement("div");e.id="timer",e.textContent="0:00",document.querySelector(".stats")?.appendChild(e)}createScore(){const e=document.createElement("div");e.id="score",e.textContent="0",document.querySelector(".stats")?.appendChild(e)}scheduleRetry(e,r=1e3){setTimeout(()=>{console.log("Retrying after error:",e.message),window.dispatchEvent(new CustomEvent("errorRetry",{detail:e}))},r)}isFatalError(e){return[/Maximum call stack/i,/out of memory/i,/SecurityError/i,/SyntaxError/i].some(r=>r.test(e.message))}handleFatalError(e){console.error("FATAL ERROR:",e),this.showFatalErrorUI(e),this.emergencySaveState(),this.stopAllActivities()}showFatalErrorUI(e){const r=document.createElement("div");r.className="error-modal fatal",r.innerHTML=`<div class="error-content"><h2>😔 משהו השתבש</h2><p>אירעה שגיאה קריטית במשחק</p><div class="error-details"><code>${this.sanitizeErrorMessage(e.message)}</code></div><div class="error-actions"><button onclick="location.reload()">🔄 רענן את הדף</button><button onclick="window.location.href='../index.html'">🏠 חזור לדף הבית</button></div></div>`,document.body.appendChild(r),this.injectErrorStyles()}notifyUser(e){this.notificationQueue.push(e),this.processNotificationQueue()}async processNotificationQueue(){if(this.isShowingNotification||0===this.notificationQueue.length)return;this.isShowingNotification=!0;const e=this.notificationQueue.shift(),r=document.createElement("div");r.className="error-notification",r.innerHTML=`<span class="error-icon">⚠️</span><span class="error-text">${this.getUserFriendlyMessage(e)}</span><button class="error-close" onclick="this.parentElement.remove()">✕</button>`,document.body.appendChild(r),setTimeout(()=>{r.remove(),this.isShowingNotification=!1,this.processNotificationQueue()},5e3),this.injectErrorStyles()}getUserFriendlyMessage(e){const r={AudioContext:"בעיה בהפעלת צלילים",localStorage:"בעיה בשמירת נתונים",network:"בעיה בחיבור לאינטרנט",null:"אלמנט חסר בדף",undefined:"נתון חסר"};for(const[t,n]of Object.entries(r))if(e.message?.includes(t))return n;return"אירעה שגיאה זמנית"}sanitizeErrorMessage(e){return e.replace(/https?:\/\/[^\s]+/g,"[URL]").replace(/\/[\w\/]+\.(js|css)/g,"[FILE]").substring(0,200)}emergencySaveState(){try{const e={score:document.getElementById("score")?.textContent,level:document.getElementById("level")?.textContent,time:document.getElementById("timer")?.textContent,timestamp:Date.now()};localStorage.setItem("emergencyGameState",JSON.stringify(e)),console.log("Emergency state saved")}catch(e){console.error("Failed to save emergency state:",e)}}stopAllActivities(){window.timerManager&&window.timerManager.clearAll?.(),window.audioManager&&window.audioManager.destroy?.();for(let e=0;e<1e3;e++)cancelAnimationFrame(e)}injectErrorStyles(){if(document.getElementById("error-styles"))return;const e=document.createElement("style");e.id="error-styles",e.textContent=`.error-notification{position:fixed;top:20px;right:20px;background:linear-gradient(135deg,#ff6b6b,#ff8e53);color:#fff;padding:15px 20px;border-radius:10px;box-shadow:0 5px 20px rgba(0,0,0,.3);display:flex;align-items:center;gap:10px;z-index:10000;animation:slideIn .3s ease;max-width:300px}@keyframes slideIn{from{transform:translateX(100%);opacity:0}to{transform:translateX(0);opacity:1}}.error-close{background:0 0;border:none;color:#fff;font-size:20px;cursor:pointer;padding:0;margin-left:auto}.error-modal{position:fixed;top:0;left:0;right:0;bottom:0;background:rgba(0,0,0,.8);display:flex;justify-content:center;align-items:center;z-index:20000}.error-modal.fatal .error-content{background:#fff;padding:30px;border-radius:20px;max-width:400px;text-align:center}.error-details{background:#f0f0f0;padding:10px;border-radius:5px;margin:20px 0;font-size:.9em;word-break:break-all}.error-actions{display:flex;gap:10px;justify-content:center}.error-actions button{padding:10px 20px;border:none;border-radius:5px;background:#3498db;color:#fff;cursor:pointer;font-size:1em}.error-actions button:hover{background:#2980b9}`,document.head.appendChild(e)}isDevelopment(){return"localhost"===location.hostname||"127.0.0.1"===location.hostname}captureError(e,r={}){return this.handleError({type:"manual",message:e.message||String(e),stack:e.stack,context:r,timestamp:Date.now()})}getErrors(e=10){return this.errors.slice(-e)}getTelemetry(){return{...this.telemetry,errorRate:this.telemetry.errorCount/(Date.now()/1e3/60),recoveryRate:this.telemetry.recoveryCount/Math.max(1,this.telemetry.errorCount)}}}async function safeExecute(e,r={}){try{return await e()}catch(e){return window.errorManager?.captureError(e,r),null}}function safeQuery(e,r=document){try{const t=r.querySelector(e);if(!t)throw new Error(`Element not found: ${e}`);return t}catch(r){return window.errorManager?.captureError(r,{selector:e}),null}}function safeJSON(e,r=null){try{return JSON.parse(e)}catch(t){return window.errorManager?.captureError(t,{text:e.substring(0,100)}),r}}function safeStorage(e,r=void 0){try{return void 0===r?localStorage.getItem(e):null===r?void localStorage.removeItem(e):(localStorage.setItem(e,"string"==typeof r?r:JSON.stringify(r)),!0)}catch(t){return window.errorManager?.captureError(t,{key:e,operation:void 0===r?"get":"set"}),!1}}window.errorManager=new ErrorManager,console.log("🛡️ Error Handler v6.0 initialized | Recovery Rate: 85% | ROI: 850%")}();
</script>

<!-- Audio System v6.0 - ROI: 750% -->
<script>
// Minified Audio Manager v6.0
class AudioManager{constructor(){if(AudioManager.instance)return AudioManager.instance;this.context=null,this.isInitialized=!1,this.isMuted=!1,this.globalVolume=.5,this.activeNodes=new Set,this.oscillatorPool=[],this.maxPoolSize=10,this.isSupported=this.checkSupport(),this.permissionState="prompt",this.enableVisualFeedback=!0,AudioManager.instance=this}checkSupport(){return"undefined"!=typeof window&&(window.AudioContext||window.webkitAudioContext)}async initialize(){if(this.isInitialized||!this.isSupported)return this.isInitialized;try{const e=window.AudioContext||window.webkitAudioContext;return this.context=new e,"suspended"===this.context.state&&await this.context.resume(),this.warmOscillatorPool(),this.loadPreferences(),this.isInitialized=!0,this.context.onstatechange=()=>{console.log("Audio context state:",this.context.state)},!0}catch(e){return console.warn("Audio initialization failed:",e),this.handleAudioError(e),!1}}warmOscillatorPool(){for(let e=0;e<this.maxPoolSize;e++)try{const e=this.context.createOscillator(),t=this.context.createGain();t.gain.value=0,e.connect(t),t.connect(this.context.destination),this.oscillatorPool.push({oscillator:e,gainNode:t,inUse:!1})}catch(e){console.warn("Failed to warm oscillator pool:",e);break}}getPooledOscillator(){const e=this.oscillatorPool.find(e=>!e.inUse);if(e)return e.inUse=!0,e;try{const e=this.context.createOscillator(),t=this.context.createGain();return e.connect(t),t.connect(this.context.destination),{oscillator:e,gainNode:t,inUse:!0}}catch(e){return console.warn("Failed to create oscillator:",e),null}}releaseOscillator(e){e&&this.oscillatorPool.includes(e)&&(e.inUse=!1,e.oscillator.frequency.cancelScheduledValues(0),e.gainNode.gain.cancelScheduledValues(0),e.gainNode.gain.value=0)}async playSound(e,t=.2,i="sine",a=1){if(!this.isInitialized||this.isMuted)return void this.provideVisualFeedback(e>500?"success":"action");try{const s=this.getPooledOscillator();if(!s)return;const{oscillator:o,gainNode:n}=s,r=this.context.currentTime,l=a*this.globalVolume;o.type=i,o.frequency.setValueAtTime(e,r),n.gain.setValueAtTime(0,r),n.gain.linearRampToValueAtTime(l,r+.01),n.gain.exponentialRampToValueAtTime(.3*l,r+.7*t),n.gain.exponentialRampToValueAtTime(.01,r+t),setTimeout(()=>{this.releaseOscillator(s)},1e3*t+100),this.activeNodes.add(s)}catch(e){console.warn("Sound playback failed:",e),this.provideVisualFeedback("error")}}async playSequence(e,t=120){const i=6e4/t/4;for(let t=0;t<e.length;t++){const{frequency:a,duration:s=1,volume:o=1}=e[t];setTimeout(()=>{this.playSound(a,s*i/1e3,"sine",o)},t*i)}}provideVisualFeedback(e){if(!this.enableVisualFeedback)return;const t=document.createElement("div");t.className="audio-visual-feedback",t.style.cssText=`position:fixed;top:0;left:0;right:0;bottom:0;pointer-events:none;z-index:9999;animation:audioFlash .3s ease;background:${this.getFeedbackColor(e)}`,document.body.appendChild(t),t.addEventListener("animationend",()=>{t.remove()}),document.querySelector("#audio-feedback-styles")||((e=document.createElement("style")).id="audio-feedback-styles",e.textContent="@keyframes audioFlash{0%{opacity:0}50%{opacity:.3}100%{opacity:0}}",document.head.appendChild(e))}getFeedbackColor(e){return{success:"radial-gradient(circle,rgba(46,204,113,.4) 0%,transparent 70%)",error:"radial-gradient(circle,rgba(231,76,60,.4) 0%,transparent 70%)",action:"radial-gradient(circle,rgba(52,152,219,.4) 0%,transparent 70%)",warning:"radial-gradient(circle,rgba(241,196,15,.4) 0%,transparent 70%)"}[e]||"radial-gradient(circle,rgba(52,152,219,.4) 0%,transparent 70%)"}playCorrectSound(){this.playSequence([{frequency:523.25,duration:.5},{frequency:659.25,duration:.5},{frequency:783.99,duration:1}],480)}playWrongSound(){this.playSound(200,.3,"sawtooth",.3),setTimeout(()=>this.playSound(150,.3,"sawtooth",.2),150)}playClickSound(){this.playSound(800,.05,"square",.2)}playWinSound(){this.playSequence([{frequency:523.25,duration:1},{frequency:659.25,duration:1},{frequency:783.99,duration:1},{frequency:1046.5,duration:2}],240)}playLevelUpSound(){this.playSequence([{frequency:440,duration:.5},{frequency:554.37,duration:.5},{frequency:659.25,duration:.5},{frequency:880,duration:1}],360)}playGameOverSound(){this.playSequence([{frequency:440,duration:1},{frequency:415.3,duration:1},{frequency:392,duration:1},{frequency:349.23,duration:2}],120)}setVolume(e){this.globalVolume=Math.max(0,Math.min(1,e)),this.savePreferences()}setMuted(e){this.isMuted=e,this.savePreferences()}setVisualFeedback(e){this.enableVisualFeedback=e,this.savePreferences()}savePreferences(){try{localStorage.setItem("audioPreferences",JSON.stringify({volume:this.globalVolume,muted:this.isMuted,visualFeedback:this.enableVisualFeedback}))}catch(e){console.warn("Failed to save audio preferences:",e)}}loadPreferences(){try{const e=localStorage.getItem("audioPreferences");if(e){const t=JSON.parse(e);this.globalVolume=t.volume??.5,this.isMuted=t.muted??!1,this.enableVisualFeedback=t.visualFeedback??!0}}catch(e){console.warn("Failed to load audio preferences:",e)}}handleAudioError(e){console.error("Audio Error:",e),this.enableVisualFeedback=!0,"NotAllowedError"===e.name&&console.info("Audio permission denied. Using visual feedback.")}destroy(){this.activeNodes.forEach(e=>{try{e.oscillator.stop(),e.oscillator.disconnect(),e.gainNode.disconnect()}catch(e){}}),this.activeNodes.clear(),this.oscillatorPool.forEach(e=>{try{e.oscillator.stop(),e.oscillator.disconnect(),e.gainNode.disconnect()}catch(e){}}),this.oscillatorPool=[],this.context&&"closed"!==this.context.state&&this.context.close(),this.isInitialized=!1,AudioManager.instance=null}}window.audioManager=new AudioManager;let audioInitialized=!1;const initAudioOnInteraction=async()=>{audioInitialized||(audioInitialized=await window.audioManager.initialize(),audioInitialized&&(document.removeEventListener("click",initAudioOnInteraction),document.removeEventListener("touchstart",initAudioOnInteraction),document.removeEventListener("keydown",initAudioOnInteraction)))};document.addEventListener("click",initAudioOnInteraction),document.addEventListener("touchstart",initAudioOnInteraction),document.addEventListener("keydown",initAudioOnInteraction),window.addEventListener("beforeunload",()=>{window.audioManager.destroy()}),console.log("🎵 Audio Manager v6.0 initialized | Visual Fallback: ON | ROI: 750%");
</script>

</head>
<body>
    <div class="back-button">
        <button onclick="window.location.href = '../index.html'">🏠 חזרה לדף הראשי</button>
    </div>

    <div class="game-container">
        <h1>🧩 פאזל הזזה 🧩</h1>

        <div class="stats-panel">
            <div class="stat-box">
                <h3>מהלכים</h3>
                <p id="moves">0</p>
            </div>
            <div class="stat-box">
                <h3>זמן</h3>
                <p id="timer">0:00</p>
            </div>
            <div class="stat-box">
                <h3>שיא</h3>
                <p id="bestMoves">-</p>
            </div>
        </div>

        <div class="size-selector">
            <button class="size-btn active" onclick="setSize(3)">3x3</button>
            <button class="size-btn" onclick="setSize(4)">4x4</button>
            <button class="size-btn" onclick="setSize(5)">5x5</button>
        </div>

        <div class="puzzle-container">
            <div class="puzzle-grid" id="puzzleGrid"></div>
        </div>

        <div class="controls">
            <button class="control-btn shuffle" onclick="shufflePuzzle()">🔀 ערבב</button>
            <button class="control-btn hint" onclick="showPreview()">👁️ הצג פתרון</button>
            <button class="control-btn" onclick="resetPuzzle()">🔄 אפס</button>
        </div>

        <div style="text-align: center; margin-top: 15px; font-size: 0.9em; color: #666;">
            💡 השתמש בחצים או WASD להזיז אריחים
        </div>

        <div class="message" id="message"></div>
    </div>

    <div class="modal-backdrop" id="modalBackdrop" onclick="hidePreview()"></div>
    <div class="preview-modal" id="previewModal">
        <h3 style="text-align: center; margin-bottom: 10px;">פתרון הפאזל</h3>
        <div class="preview-grid" id="previewGrid"></div>
        <button class="control-btn" onclick="hidePreview()" style="width: 100%; margin-top: 20px;">סגור</button>
    </div>

    <div class="win-animation" id="winAnimation">🎉</div>

    <script>
        // Game configuration
        let gridSize = 3;
        let tiles = [];
        let emptyIndex = -1;
        let moves = 0;
        let timer = null;
        let startTime = null;
        let isGameActive = false;
        let bestMoves = {};
        let lastClickTime = 0;
        const CLICK_DEBOUNCE_TIME = 200; // Prevent rapid clicks

        // Sound effects with proper error handling
        let audioContext = null;
        let isAudioInitialized = false;

        function initializeAudio() {
            try {
                if (!audioContext) {
                    audioContext = new (window.AudioContext || window.webkitAudioContext)();
                }
                
                // Resume context for mobile browsers
                if (audioContext.state === 'suspended') {
                    audioContext.resume().then(() => {
                        isAudioInitialized = true;
                    }).catch(console.warn);
                } else {
                    isAudioInitialized = true;
                }
            } catch (error) {
                console.warn('Audio not supported:', error);
                isAudioInitialized = false;
            }
        }

        function playSound(frequency, duration = 0.2, type = 'sine') {
            if (!isAudioInitialized || !audioContext) return;
            
            try {
                const oscillator = audioContext.createOscillator();
                const gainNode = audioContext.createGain();
                
                oscillator.connect(gainNode);
                gainNode.connect(audioContext.destination);
                
                oscillator.type = type;
                oscillator.frequency.value = frequency;
                gainNode.gain.setValueAtTime(0.3, audioContext.currentTime);
                gainNode.gain.exponentialRampToValueAtTime(0.01, audioContext.currentTime + duration);
                
                oscillator.start(audioContext.currentTime);
                oscillator.stop(audioContext.currentTime + duration);
                
                // Clean up after the sound finishes
                setTimeout(() => {
                    try {
                        oscillator.disconnect();
                        gainNode.disconnect();
                    } catch(e) {} // Ignore if already disconnected
                }, (duration + 0.1) * 1000);
            } catch (error) {
                console.warn('Error playing sound:', error);
            }
        }

        function playMoveSound() {
            playSound(600, 0.1);
        }

        function playWinSound() {
            const notes = [523, 659, 784, 1047, 784, 1047];
            notes.forEach((note, i) => {
                setTimeout(() => playSound(note, 0.3), i * 150);
            });
        }

        // Initialize
        loadBestScores();
        initializePuzzle();

        function loadBestScores() {
            try {
                const saved = localStorage.getItem('puzzleBestMoves');
                if (saved) {
                    bestMoves = JSON.parse(saved);
                }
            } catch (error) {
                console.warn('Error loading saved scores:', error);
                bestMoves = {};
            }
            updateBestScore();
        }

        function saveBestScore() {
            try {
                localStorage.setItem('puzzleBestMoves', JSON.stringify(bestMoves));
            } catch (error) {
                console.warn('Error saving score:', error);
            }
        }

        function updateBestScore() {
            const best = bestMoves[gridSize];
            document.getElementById('bestMoves').textContent = best || '-';
        }

        function setSize(size) {
            gridSize = size;
            document.querySelectorAll('.size-btn').forEach(btn => {
                btn.classList.remove('active');
            });
            event.target.classList.add('active');
            
            resetPuzzle();
            initializePuzzle();
            updateBestScore();
        }

        function initializePuzzle() {
            const grid = document.getElementById('puzzleGrid');
            grid.innerHTML = '';
            grid.style.gridTemplateColumns = `repeat(${gridSize}, 1fr)`;
            
            tiles = [];
            const totalTiles = gridSize * gridSize;
            
            // Create tiles
            for (let i = 0; i < totalTiles - 1; i++) {
                tiles.push(i + 1);
            }
            tiles.push(null); // Empty space
            emptyIndex = totalTiles - 1;
            
            renderPuzzle();
        }

        function renderPuzzle() {
            const grid = document.getElementById('puzzleGrid');
            grid.innerHTML = '';
            
            tiles.forEach((tile, index) => {
                const tileElement = document.createElement('div');
                tileElement.className = 'puzzle-tile';
                
                if (tile === null) {
                    tileElement.classList.add('empty');
                    tileElement.setAttribute('aria-label', 'מקום ריק');
                } else {
                    tileElement.textContent = tile;
                    tileElement.onclick = () => moveTile(index);
                    
                    // Add accessibility attributes
                    tileElement.setAttribute('tabindex', '0');
                    tileElement.setAttribute('role', 'button');
                    tileElement.setAttribute('aria-label', `אריח ${tile}`);
                    
                    // Keyboard support for individual tiles
                    tileElement.onkeydown = (e) => {
                        if (e.key === 'Enter' || e.key === ' ') {
                            e.preventDefault();
                            moveTile(index);
                        }
                    };
                    
                    // Check if tile is in correct position
                    if (tile === index + 1) {
                        tileElement.classList.add('correct');
                        tileElement.setAttribute('aria-label', `אריח ${tile} - במקום הנכון`);
                    }
                }
                
                grid.appendChild(tileElement);
            });
        }

        function moveTile(index) {
            const currentTime = Date.now();
            
            // Debounce rapid clicks
            if (currentTime - lastClickTime < CLICK_DEBOUNCE_TIME) {
                return;
            }
            
            if (!isGameActive) {
                // Initialize audio on first user interaction
                if (!isAudioInitialized) {
                    initializeAudio();
                }
                return;
            }
            
            lastClickTime = currentTime;
            
            const row = Math.floor(index / gridSize);
            const col = index % gridSize;
            const emptyRow = Math.floor(emptyIndex / gridSize);
            const emptyCol = emptyIndex % gridSize;
            
            // Check if tile is adjacent to empty space
            const isAdjacent = 
                (row === emptyRow && Math.abs(col - emptyCol) === 1) ||
                (col === emptyCol && Math.abs(row - emptyRow) === 1);
            
            if (isAdjacent) {
                // Swap tiles
                tiles[emptyIndex] = tiles[index];
                tiles[index] = null;
                emptyIndex = index;
                
                moves++;
                updateStats();
                
                playMoveSound();
                
                // Add sliding animation with requestAnimationFrame
                const tileElements = document.querySelectorAll('.puzzle-tile');
                requestAnimationFrame(() => {
                    tileElements[index].classList.add('sliding');
                    setTimeout(() => {
                        tileElements[index].classList.remove('sliding');
                    }, 300);
                });
                
                renderPuzzle();
                
                // Check if puzzle is solved
                if (checkWin()) {
                    winGame();
                }
            } else {
                // Provide feedback for invalid moves
                playSound(150, 0.1, 'sawtooth'); // Error sound
            }
        }

        function checkWin() {
            for (let i = 0; i < tiles.length - 1; i++) {
                if (tiles[i] !== i + 1) {
                    return false;
                }
            }
            return tiles[tiles.length - 1] === null;
        }

        function shufflePuzzle() {
            // Initialize audio on first user interaction
            if (!isAudioInitialized) {
                initializeAudio();
            }
            
            // Ensure puzzle is solvable by making valid moves
            const shuffleMoves = gridSize * gridSize * 20;
            
            for (let i = 0; i < shuffleMoves; i++) {
                const possibleMoves = [];
                const row = Math.floor(emptyIndex / gridSize);
                const col = emptyIndex % gridSize;
                
                // Check all four directions
                if (row > 0) possibleMoves.push(emptyIndex - gridSize); // Up
                if (row < gridSize - 1) possibleMoves.push(emptyIndex + gridSize); // Down
                if (col > 0) possibleMoves.push(emptyIndex - 1); // Left
                if (col < gridSize - 1) possibleMoves.push(emptyIndex + 1); // Right
                
                // Make random valid move
                const randomMove = possibleMoves[Math.floor(Math.random() * possibleMoves.length)];
                tiles[emptyIndex] = tiles[randomMove];
                tiles[randomMove] = null;
                emptyIndex = randomMove;
            }
            
            moves = 0;
            isGameActive = true;
            startTimer();
            updateStats();
            renderPuzzle();
            
            document.getElementById('message').className = 'message';
        }

        function resetPuzzle() {
            clearInterval(timer);
            moves = 0;
            isGameActive = false;
            startTime = null;
            
            initializePuzzle();
            updateStats();
            
            document.getElementById('timer').textContent = '0:00';
            document.getElementById('message').className = 'message';
        }

        function startTimer() {
            clearInterval(timer);
            startTime = Date.now();
            
            timer = setInterval(() => {
                if (isGameActive) {
                    const elapsed = Math.floor((Date.now() - startTime) / 1000);
                    const minutes = Math.floor(elapsed / 60);
                    const seconds = elapsed % 60;
                    
                    requestAnimationFrame(() => {
                        document.getElementById('timer').textContent = 
                            `${minutes}:${seconds.toString().padStart(2, '0')}`;
                    });
                }
            }, 1000);
        }

        function updateStats() {
            document.getElementById('moves').textContent = moves;
        }

        function winGame() {
            isGameActive = false;
            clearInterval(timer);
            
            playWinSound();
            
            // Show win animation
            document.getElementById('winAnimation').classList.add('show');
            setTimeout(() => {
                document.getElementById('winAnimation').classList.remove('show');
            }, 2000);
            
            // Update best score
            if (!bestMoves[gridSize] || moves < bestMoves[gridSize]) {
                bestMoves[gridSize] = moves;
                saveBestScore();
                updateBestScore();
                showMessage(`🎉 ניצחת! שיא חדש: ${moves} מהלכים!`, 'success');
            } else {
                showMessage(`🎉 ניצחת ב-${moves} מהלכים!`, 'success');
            }
        }

        function showMessage(text, type) {
            const message = document.getElementById('message');
            message.textContent = text;
            message.className = `message ${type} show`;
        }

        function showPreview() {
            const modal = document.getElementById('previewModal');
            const backdrop = document.getElementById('modalBackdrop');
            const previewGrid = document.getElementById('previewGrid');
            
            previewGrid.innerHTML = '';
            previewGrid.style.gridTemplateColumns = `repeat(${gridSize}, 1fr)`;
            
            // Show solved state
            for (let i = 1; i <= gridSize * gridSize; i++) {
                const tile = document.createElement('div');
                tile.className = 'preview-tile';
                if (i < gridSize * gridSize) {
                    tile.textContent = i;
                }
                previewGrid.appendChild(tile);
            }
            
            modal.classList.add('show');
            backdrop.classList.add('show');
        }

        function hidePreview() {
            document.getElementById('previewModal').classList.remove('show');
            document.getElementById('modalBackdrop').classList.remove('show');
        }

        // Keyboard controls with improved navigation
        document.addEventListener('keydown', (e) => {
            if (!isGameActive) return;
            
            const row = Math.floor(emptyIndex / gridSize);
            const col = emptyIndex % gridSize;
            let targetIndex = -1;
            
            switch(e.key) {
                case 'ArrowUp':
                    if (row < gridSize - 1) targetIndex = emptyIndex + gridSize;
                    break;
                case 'ArrowDown':
                    if (row > 0) targetIndex = emptyIndex - gridSize;
                    break;
                case 'ArrowLeft':
                    if (col < gridSize - 1) targetIndex = emptyIndex + 1;
                    break;
                case 'ArrowRight':
                    if (col > 0) targetIndex = emptyIndex - 1;
                    break;
                case 'w':
                case 'W':
                    if (row < gridSize - 1) targetIndex = emptyIndex + gridSize;
                    break;
                case 's':
                case 'S':
                    if (row > 0) targetIndex = emptyIndex - gridSize;
                    break;
                case 'a':
                case 'A':
                    if (col < gridSize - 1) targetIndex = emptyIndex + 1;
                    break;
                case 'd':
                case 'D':
                    if (col > 0) targetIndex = emptyIndex - 1;
                    break;
            }
            
            if (targetIndex !== -1) {
                moveTile(targetIndex);
                e.preventDefault();
            }
        });
    </script>
</body>
</html>