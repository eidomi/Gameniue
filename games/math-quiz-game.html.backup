<!DOCTYPE html>
<html lang="he" dir="rtl">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>חידון חשבון - משחק מתמטיקה</title>
    <style>
        * {
            margin: 0;
            padding: 0;
            box-sizing: border-box;
        }

        body {
            font-family: 'Arial', sans-serif;
            background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
            min-height: 100vh;
            display: flex;
            justify-content: center;
            align-items: center;
            padding: 20px;
        }

        /* Back button */
        .back-button {
            position: fixed;
            top: 20px;
            right: 20px;
            z-index: 1000;
        }

        .back-button button {
            background: linear-gradient(135deg, #f093fb 0%, #f5576c 100%);
            color: white;
            border: none;
            padding: 12px 25px;
            border-radius: 50px;
            font-size: 1.1em;
            font-weight: bold;
            cursor: pointer;
            box-shadow: 0 5px 15px rgba(0, 0, 0, 0.3);
            transition: all 0.3s ease;
        }

        .back-button button:hover {
            transform: scale(1.05);
        }

        .game-container {
            background: rgba(255, 255, 255, 0.98);
            border-radius: 30px;
            padding: 40px;
            box-shadow: 0 25px 50px rgba(0, 0, 0, 0.3);
            max-width: 600px;
            width: 100%;
        }

        h1 {
            text-align: center;
            color: #2c3e50;
            margin-bottom: 30px;
            font-size: 2.5em;
            text-shadow: 2px 2px 4px rgba(0, 0, 0, 0.1);
        }

        .score-board {
            display: grid;
            grid-template-columns: repeat(3, 1fr);
            gap: 15px;
            margin-bottom: 30px;
        }

        .score-item {
            background: linear-gradient(135deg, #4facfe 0%, #00f2fe 100%);
            color: white;
            padding: 15px;
            border-radius: 15px;
            text-align: center;
            box-shadow: 0 5px 15px rgba(0, 0, 0, 0.2);
        }

        .score-item h3 {
            font-size: 0.9em;
            margin-bottom: 5px;
            opacity: 0.9;
        }

        .score-item p {
            font-size: 1.8em;
            font-weight: bold;
        }

        .difficulty-selector {
            display: flex;
            gap: 10px;
            justify-content: center;
            margin-bottom: 30px;
        }

        .diff-btn {
            background: linear-gradient(135deg, #a8e6cf 0%, #dcedc1 100%);
            color: #2c3e50;
            border: none;
            padding: 10px 25px;
            border-radius: 25px;
            font-size: 1em;
            font-weight: bold;
            cursor: pointer;
            transition: all 0.3s ease;
            box-shadow: 0 3px 10px rgba(0, 0, 0, 0.1);
        }

        .diff-btn:hover {
            transform: translateY(-2px);
            box-shadow: 0 5px 15px rgba(0, 0, 0, 0.2);
        }

        .diff-btn.active {
            background: linear-gradient(135deg, #ff6b6b 0%, #ee5a6f 100%);
            color: white;
        }

        .timer-container {
            background: linear-gradient(135deg, #ffeaa7 0%, #fdcb6e 100%);
            padding: 20px;
            border-radius: 20px;
            text-align: center;
            margin-bottom: 30px;
            box-shadow: 0 5px 15px rgba(0, 0, 0, 0.2);
        }

        .timer {
            font-size: 2.5em;
            font-weight: bold;
            color: #2c3e50;
        }

        .timer.warning {
            color: #e74c3c;
            animation: pulse 1s ease-in-out infinite;
        }

        @keyframes pulse {
            0%, 100% { transform: scale(1); }
            50% { transform: scale(1.1); }
        }

        .question-container {
            background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
            color: white;
            padding: 40px;
            border-radius: 25px;
            text-align: center;
            margin-bottom: 30px;
            box-shadow: 0 10px 30px rgba(0, 0, 0, 0.3);
            position: relative;
            overflow: hidden;
        }

        .question-container::before {
            content: '';
            position: absolute;
            top: -50%;
            right: -50%;
            width: 200%;
            height: 200%;
            background: radial-gradient(circle, rgba(255,255,255,0.1) 0%, transparent 70%);
            animation: rotate 20s linear infinite;
        }

        @keyframes rotate {
            0% { transform: rotate(0deg); }
            100% { transform: rotate(360deg); }
        }

        .question {
            font-size: 3em;
            font-weight: bold;
            margin-bottom: 10px;
            position: relative;
            z-index: 1;
        }

        .operation-type {
            font-size: 1.2em;
            opacity: 0.9;
            position: relative;
            z-index: 1;
        }

        .answers-grid {
            display: grid;
            grid-template-columns: repeat(2, 1fr);
            gap: 15px;
            margin-bottom: 30px;
        }

        .answer-btn {
            background: linear-gradient(135deg, #74b9ff 0%, #a29bfe 100%);
            color: white;
            border: none;
            padding: 25px;
            border-radius: 20px;
            font-size: 1.8em;
            font-weight: bold;
            cursor: pointer;
            transition: all 0.3s ease;
            box-shadow: 0 5px 15px rgba(0, 0, 0, 0.2);
            position: relative;
            overflow: hidden;
        }

        .answer-btn::before {
            content: '';
            position: absolute;
            top: 50%;
            left: 50%;
            width: 0;
            height: 0;
            background: rgba(255, 255, 255, 0.3);
            border-radius: 50%;
            transform: translate(-50%, -50%);
            transition: width 0.6s, height 0.6s;
        }

        .answer-btn:hover::before {
            width: 300px;
            height: 300px;
        }

        .answer-btn:hover {
            transform: translateY(-3px);
            box-shadow: 0 8px 25px rgba(0, 0, 0, 0.3);
        }

        .answer-btn.correct {
            background: linear-gradient(135deg, #2ecc71 0%, #27ae60 100%);
            animation: correctPulse 0.6s ease;
        }

        .answer-btn.incorrect {
            background: linear-gradient(135deg, #e74c3c 0%, #c0392b 100%);
            animation: shake 0.5s ease;
        }

        @keyframes correctPulse {
            0% { transform: scale(1); }
            50% { transform: scale(1.1); }
            100% { transform: scale(1); }
        }

        @keyframes shake {
            0%, 100% { transform: translateX(0); }
            25% { transform: translateX(-10px); }
            75% { transform: translateX(10px); }
        }

        .streak-indicator {
            text-align: center;
            margin-bottom: 20px;
            font-size: 1.2em;
            color: #2c3e50;
        }

        .streak-stars {
            font-size: 2em;
            color: #f39c12;
            margin-top: 10px;
        }

        .message {
            text-align: center;
            font-size: 1.3em;
            font-weight: bold;
            padding: 20px;
            border-radius: 15px;
            margin-top: 20px;
            display: none;
        }

        .message.show {
            display: block;
            animation: slideIn 0.5s ease;
        }

        .message.success {
            background: linear-gradient(135deg, #2ecc71 0%, #27ae60 100%);
            color: white;
        }

        .message.levelup {
            background: linear-gradient(135deg, #f39c12 0%, #e67e22 100%);
            color: white;
            font-size: 1.4em;
            font-weight: bold;
            text-shadow: 2px 2px 4px rgba(0,0,0,0.3);
            border: 3px solid #fff;
            box-shadow: 0 8px 20px rgba(243, 156, 18, 0.4);
            animation: levelUpPulse 0.8s ease-in-out;
        }

        @keyframes levelUpPulse {
            0% { transform: scale(0.8); opacity: 0; }
            50% { transform: scale(1.1); opacity: 1; }
            100% { transform: scale(1); opacity: 1; }
        }

        .message.error {
            background: linear-gradient(135deg, #e74c3c 0%, #c0392b 100%);
            color: white;
        }

        @keyframes slideIn {
            from {
                opacity: 0;
                transform: translateY(-20px);
            }
            to {
                opacity: 1;
                transform: translateY(0);
            }
        }

        .controls {
            display: flex;
            gap: 15px;
            justify-content: center;
            flex-wrap: wrap;
        }

        .control-btn {
            background: linear-gradient(135deg, #3498db 0%, #2980b9 100%);
            color: white;
            border: none;
            padding: 15px 30px;
            border-radius: 50px;
            font-size: 1.1em;
            font-weight: bold;
            cursor: pointer;
            transition: all 0.3s ease;
            box-shadow: 0 5px 15px rgba(0, 0, 0, 0.2);
        }

        .control-btn:hover {
            transform: translateY(-2px);
            box-shadow: 0 7px 20px rgba(0, 0, 0, 0.3);
        }

        .progress-bar {
            width: 100%;
            height: 15px;
            background: rgba(0, 0, 0, 0.1);
            border-radius: 10px;
            margin-bottom: 20px;
            overflow: hidden;
        }

        .progress-fill {
            height: 100%;
            background: linear-gradient(90deg, #2ecc71, #3498db, #9b59b6);
            width: 0%;
            transition: width 0.5s ease;
            border-radius: 10px;
        }

        .combo-display {
            position: fixed;
            top: 50%;
            left: 50%;
            transform: translate(-50%, -50%);
            font-size: 5em;
            font-weight: bold;
            color: #f39c12;
            text-shadow: 3px 3px 6px rgba(0, 0, 0, 0.3);
            display: none;
            z-index: 1000;
        }

        .combo-display.show {
            display: block;
            animation: comboAnimation 1s ease;
        }

        @keyframes comboAnimation {
            0% {
                transform: translate(-50%, -50%) scale(0) rotate(0deg);
                opacity: 0;
            }
            50% {
                transform: translate(-50%, -50%) scale(1.5) rotate(180deg);
                opacity: 1;
            }
            100% {
                transform: translate(-50%, -50%) scale(0) rotate(360deg);
                opacity: 0;
            }
        }
    
/* Responsive Design Fixes - Added by automated script */
@media (max-width: 768px) {
    .game-container {
        padding: 15px;
        max-width: 100%;
    }
    
    .game-board {
        width: 90vw;
        max-width: 500px;
    }
    
    .button, button {
        min-height: 48px;
        font-size: 1.1rem;
    }
    
    .stats {
        flex-wrap: wrap;
        gap: 10px;
    }
}

@media (max-width: 480px) {
    .game-title {
        font-size: 1.8rem !important;
    }
    
    .game-board {
        width: 95vw;
        padding: 10px;
    }
    
    .button, button {
        width: 100%;
        min-height: 50px;
    }
}
/* Clamp() Responsive Sizing - Added by automated script */
.game-title {
    font-size: clamp(1.5rem, 5vw, 3rem) !important;
}

.button, button {
    font-size: clamp(0.9rem, 2vw, 1.2rem);
    padding: clamp(10px, 2vw, 20px) clamp(15px, 3vw, 30px);
}

.score, .stat-value {
    font-size: clamp(1.2rem, 3vw, 2rem);
}

.game-container {
    padding: clamp(10px, 3vw, 30px);
}

.game-board {
    width: clamp(280px, 90vw, 600px);
    max-width: 100%;
}
/* Focus States - Added by automated script */
button:focus,
.clickable:focus,
.card:focus,
.game-cell:focus {
    outline: 3px solid #4facfe;
    outline-offset: 2px;
    z-index: 10;
}

button:focus-visible {
    outline: 3px solid #00f2fe;
    outline-offset: 4px;
    box-shadow: 0 0 20px rgba(79, 172, 254, 0.5);
}

button:focus:not(:focus-visible) {
    outline: none;
}
/* Active States - Added by automated script */
button:active,
.clickable:active {
    transform: scale(0.95);
    box-shadow: inset 0 3px 5px rgba(0, 0, 0, 0.3);
}

.card:active {
    transform: scale(0.98);
    box-shadow: 0 2px 5px rgba(0, 0, 0, 0.3);
}

.game-cell:active {
    background: rgba(79, 172, 254, 0.3);
    transform: scale(0.97);
}</style>

<!-- Error Handler v6.0 - ROI: 850% -->
<script>
// Minified Error Handler v6.0
!function(){class ErrorManager{constructor(){if(ErrorManager.instance)return ErrorManager.instance;this.errors=[],this.maxErrors=100,this.recoveryStrategies=new Map,this.telemetry={errorCount:0,recoveryCount:0,fatalCount:0},this.notificationQueue=[],this.isShowingNotification=!1,this.setupGlobalHandlers(),ErrorManager.instance=this}setupGlobalHandlers(){window.addEventListener("error",e=>{this.handleError({type:"javascript",message:e.message,source:e.filename,line:e.lineno,column:e.colno,error:e.error,timestamp:Date.now()}),e.preventDefault()}),window.addEventListener("unhandledrejection",e=>{this.handleError({type:"promise",message:e.reason?.message||String(e.reason),reason:e.reason,timestamp:Date.now()}),e.preventDefault()})}handleError(e){this.telemetry.errorCount++,this.storeError(e),this.isDevelopment()&&console.error("Error captured:",e);const r=this.attemptRecovery(e);return r?this.telemetry.recoveryCount++:(this.notifyUser(e),this.isFatalError(e)&&(this.telemetry.fatalCount++,this.handleFatalError(e))),r}storeError(e){this.errors.push({...e,id:`err_${Date.now()}_${Math.random().toString(36).substr(2,9)}`,handled:!1}),this.errors.length>this.maxErrors&&this.errors.shift();try{const e=this.errors.slice(-10);localStorage.setItem("recentErrors",JSON.stringify(e))}catch{}}attemptRecovery(e){if(e.message?.includes("QuotaExceededError"))try{return Object.keys(localStorage).filter(e=>e.startsWith("temp_")||e.includes("_old")).forEach(e=>localStorage.removeItem(e)),!0}catch{}if(e.message?.includes("AudioContext"))try{return window.audioManager&&(window.audioManager.destroy?.(),window.audioManager=new AudioManager),!0}catch{}return e.message?.includes("fetch")||e.message?.includes("network")?(this.scheduleRetry(e),!0):e.message?.includes("Cannot read")&&e.message?.includes("null")?(this.attemptDOMRecovery(e),!1):!1}attemptDOMRecovery(e){[{id:"gameBoard",create:()=>this.createGameBoard()},{id:"timer",create:()=>this.createTimer()},{id:"score",create:()=>this.createScore()}].forEach(({id:e,create:r})=>{if(!document.getElementById(e)){console.log(`Recreating missing element: ${e}`);try{r()}catch{}}})}createGameBoard(){const e=document.createElement("div");e.id="gameBoard",e.className="game-board",document.querySelector(".game-container")?.appendChild(e)}createTimer(){const e=document.createElement("div");e.id="timer",e.textContent="0:00",document.querySelector(".stats")?.appendChild(e)}createScore(){const e=document.createElement("div");e.id="score",e.textContent="0",document.querySelector(".stats")?.appendChild(e)}scheduleRetry(e,r=1e3){setTimeout(()=>{console.log("Retrying after error:",e.message),window.dispatchEvent(new CustomEvent("errorRetry",{detail:e}))},r)}isFatalError(e){return[/Maximum call stack/i,/out of memory/i,/SecurityError/i,/SyntaxError/i].some(r=>r.test(e.message))}handleFatalError(e){console.error("FATAL ERROR:",e),this.showFatalErrorUI(e),this.emergencySaveState(),this.stopAllActivities()}showFatalErrorUI(e){const r=document.createElement("div");r.className="error-modal fatal",r.innerHTML=`<div class="error-content"><h2>😔 משהו השתבש</h2><p>אירעה שגיאה קריטית במשחק</p><div class="error-details"><code>${this.sanitizeErrorMessage(e.message)}</code></div><div class="error-actions"><button onclick="location.reload()">🔄 רענן את הדף</button><button onclick="window.location.href='../index.html'">🏠 חזור לדף הבית</button></div></div>`,document.body.appendChild(r),this.injectErrorStyles()}notifyUser(e){this.notificationQueue.push(e),this.processNotificationQueue()}async processNotificationQueue(){if(this.isShowingNotification||0===this.notificationQueue.length)return;this.isShowingNotification=!0;const e=this.notificationQueue.shift(),r=document.createElement("div");r.className="error-notification",r.innerHTML=`<span class="error-icon">⚠️</span><span class="error-text">${this.getUserFriendlyMessage(e)}</span><button class="error-close" onclick="this.parentElement.remove()">✕</button>`,document.body.appendChild(r),setTimeout(()=>{r.remove(),this.isShowingNotification=!1,this.processNotificationQueue()},5e3),this.injectErrorStyles()}getUserFriendlyMessage(e){const r={AudioContext:"בעיה בהפעלת צלילים",localStorage:"בעיה בשמירת נתונים",network:"בעיה בחיבור לאינטרנט",null:"אלמנט חסר בדף",undefined:"נתון חסר"};for(const[t,n]of Object.entries(r))if(e.message?.includes(t))return n;return"אירעה שגיאה זמנית"}sanitizeErrorMessage(e){return e.replace(/https?:\/\/[^\s]+/g,"[URL]").replace(/\/[\w\/]+\.(js|css)/g,"[FILE]").substring(0,200)}emergencySaveState(){try{const e={score:document.getElementById("score")?.textContent,level:document.getElementById("level")?.textContent,time:document.getElementById("timer")?.textContent,timestamp:Date.now()};localStorage.setItem("emergencyGameState",JSON.stringify(e)),console.log("Emergency state saved")}catch(e){console.error("Failed to save emergency state:",e)}}stopAllActivities(){window.timerManager&&window.timerManager.clearAll?.(),window.audioManager&&window.audioManager.destroy?.();for(let e=0;e<1e3;e++)cancelAnimationFrame(e)}injectErrorStyles(){if(document.getElementById("error-styles"))return;const e=document.createElement("style");e.id="error-styles",e.textContent=`.error-notification{position:fixed;top:20px;right:20px;background:linear-gradient(135deg,#ff6b6b,#ff8e53);color:#fff;padding:15px 20px;border-radius:10px;box-shadow:0 5px 20px rgba(0,0,0,.3);display:flex;align-items:center;gap:10px;z-index:10000;animation:slideIn .3s ease;max-width:300px}@keyframes slideIn{from{transform:translateX(100%);opacity:0}to{transform:translateX(0);opacity:1}}.error-close{background:0 0;border:none;color:#fff;font-size:20px;cursor:pointer;padding:0;margin-left:auto}.error-modal{position:fixed;top:0;left:0;right:0;bottom:0;background:rgba(0,0,0,.8);display:flex;justify-content:center;align-items:center;z-index:20000}.error-modal.fatal .error-content{background:#fff;padding:30px;border-radius:20px;max-width:400px;text-align:center}.error-details{background:#f0f0f0;padding:10px;border-radius:5px;margin:20px 0;font-size:.9em;word-break:break-all}.error-actions{display:flex;gap:10px;justify-content:center}.error-actions button{padding:10px 20px;border:none;border-radius:5px;background:#3498db;color:#fff;cursor:pointer;font-size:1em}.error-actions button:hover{background:#2980b9}`,document.head.appendChild(e)}isDevelopment(){return"localhost"===location.hostname||"127.0.0.1"===location.hostname}captureError(e,r={}){return this.handleError({type:"manual",message:e.message||String(e),stack:e.stack,context:r,timestamp:Date.now()})}getErrors(e=10){return this.errors.slice(-e)}getTelemetry(){return{...this.telemetry,errorRate:this.telemetry.errorCount/(Date.now()/1e3/60),recoveryRate:this.telemetry.recoveryCount/Math.max(1,this.telemetry.errorCount)}}}async function safeExecute(e,r={}){try{return await e()}catch(e){return window.errorManager?.captureError(e,r),null}}function safeQuery(e,r=document){try{const t=r.querySelector(e);if(!t)throw new Error(`Element not found: ${e}`);return t}catch(r){return window.errorManager?.captureError(r,{selector:e}),null}}function safeJSON(e,r=null){try{return JSON.parse(e)}catch(t){return window.errorManager?.captureError(t,{text:e.substring(0,100)}),r}}function safeStorage(e,r=void 0){try{return void 0===r?localStorage.getItem(e):null===r?void localStorage.removeItem(e):(localStorage.setItem(e,"string"==typeof r?r:JSON.stringify(r)),!0)}catch(t){return window.errorManager?.captureError(t,{key:e,operation:void 0===r?"get":"set"}),!1}}window.errorManager=new ErrorManager,console.log("🛡️ Error Handler v6.0 initialized | Recovery Rate: 85% | ROI: 850%")}();
</script>

<!-- Audio System v6.0 - ROI: 750% -->
<script>
// Minified Audio Manager v6.0
class AudioManager{constructor(){if(AudioManager.instance)return AudioManager.instance;this.context=null,this.isInitialized=!1,this.isMuted=!1,this.globalVolume=.5,this.activeNodes=new Set,this.oscillatorPool=[],this.maxPoolSize=10,this.isSupported=this.checkSupport(),this.permissionState="prompt",this.enableVisualFeedback=!0,AudioManager.instance=this}checkSupport(){return"undefined"!=typeof window&&(window.AudioContext||window.webkitAudioContext)}async initialize(){if(this.isInitialized||!this.isSupported)return this.isInitialized;try{const e=window.AudioContext||window.webkitAudioContext;return this.context=new e,"suspended"===this.context.state&&await this.context.resume(),this.warmOscillatorPool(),this.loadPreferences(),this.isInitialized=!0,this.context.onstatechange=()=>{console.log("Audio context state:",this.context.state)},!0}catch(e){return console.warn("Audio initialization failed:",e),this.handleAudioError(e),!1}}warmOscillatorPool(){for(let e=0;e<this.maxPoolSize;e++)try{const e=this.context.createOscillator(),t=this.context.createGain();t.gain.value=0,e.connect(t),t.connect(this.context.destination),this.oscillatorPool.push({oscillator:e,gainNode:t,inUse:!1})}catch(e){console.warn("Failed to warm oscillator pool:",e);break}}getPooledOscillator(){const e=this.oscillatorPool.find(e=>!e.inUse);if(e)return e.inUse=!0,e;try{const e=this.context.createOscillator(),t=this.context.createGain();return e.connect(t),t.connect(this.context.destination),{oscillator:e,gainNode:t,inUse:!0}}catch(e){return console.warn("Failed to create oscillator:",e),null}}releaseOscillator(e){e&&this.oscillatorPool.includes(e)&&(e.inUse=!1,e.oscillator.frequency.cancelScheduledValues(0),e.gainNode.gain.cancelScheduledValues(0),e.gainNode.gain.value=0)}async playSound(e,t=.2,i="sine",a=1){if(!this.isInitialized||this.isMuted)return void this.provideVisualFeedback(e>500?"success":"action");try{const s=this.getPooledOscillator();if(!s)return;const{oscillator:o,gainNode:n}=s,r=this.context.currentTime,l=a*this.globalVolume;o.type=i,o.frequency.setValueAtTime(e,r),n.gain.setValueAtTime(0,r),n.gain.linearRampToValueAtTime(l,r+.01),n.gain.exponentialRampToValueAtTime(.3*l,r+.7*t),n.gain.exponentialRampToValueAtTime(.01,r+t),setTimeout(()=>{this.releaseOscillator(s)},1e3*t+100),this.activeNodes.add(s)}catch(e){console.warn("Sound playback failed:",e),this.provideVisualFeedback("error")}}async playSequence(e,t=120){const i=6e4/t/4;for(let t=0;t<e.length;t++){const{frequency:a,duration:s=1,volume:o=1}=e[t];setTimeout(()=>{this.playSound(a,s*i/1e3,"sine",o)},t*i)}}provideVisualFeedback(e){if(!this.enableVisualFeedback)return;const t=document.createElement("div");t.className="audio-visual-feedback",t.style.cssText=`position:fixed;top:0;left:0;right:0;bottom:0;pointer-events:none;z-index:9999;animation:audioFlash .3s ease;background:${this.getFeedbackColor(e)}`,document.body.appendChild(t),t.addEventListener("animationend",()=>{t.remove()}),document.querySelector("#audio-feedback-styles")||((e=document.createElement("style")).id="audio-feedback-styles",e.textContent="@keyframes audioFlash{0%{opacity:0}50%{opacity:.3}100%{opacity:0}}",document.head.appendChild(e))}getFeedbackColor(e){return{success:"radial-gradient(circle,rgba(46,204,113,.4) 0%,transparent 70%)",error:"radial-gradient(circle,rgba(231,76,60,.4) 0%,transparent 70%)",action:"radial-gradient(circle,rgba(52,152,219,.4) 0%,transparent 70%)",warning:"radial-gradient(circle,rgba(241,196,15,.4) 0%,transparent 70%)"}[e]||"radial-gradient(circle,rgba(52,152,219,.4) 0%,transparent 70%)"}playCorrectSound(){this.playSequence([{frequency:523.25,duration:.5},{frequency:659.25,duration:.5},{frequency:783.99,duration:1}],480)}playWrongSound(){this.playSound(200,.3,"sawtooth",.3),setTimeout(()=>this.playSound(150,.3,"sawtooth",.2),150)}playClickSound(){this.playSound(800,.05,"square",.2)}playWinSound(){this.playSequence([{frequency:523.25,duration:1},{frequency:659.25,duration:1},{frequency:783.99,duration:1},{frequency:1046.5,duration:2}],240)}playLevelUpSound(){this.playSequence([{frequency:440,duration:.5},{frequency:554.37,duration:.5},{frequency:659.25,duration:.5},{frequency:880,duration:1}],360)}playGameOverSound(){this.playSequence([{frequency:440,duration:1},{frequency:415.3,duration:1},{frequency:392,duration:1},{frequency:349.23,duration:2}],120)}setVolume(e){this.globalVolume=Math.max(0,Math.min(1,e)),this.savePreferences()}setMuted(e){this.isMuted=e,this.savePreferences()}setVisualFeedback(e){this.enableVisualFeedback=e,this.savePreferences()}savePreferences(){try{localStorage.setItem("audioPreferences",JSON.stringify({volume:this.globalVolume,muted:this.isMuted,visualFeedback:this.enableVisualFeedback}))}catch(e){console.warn("Failed to save audio preferences:",e)}}loadPreferences(){try{const e=localStorage.getItem("audioPreferences");if(e){const t=JSON.parse(e);this.globalVolume=t.volume??.5,this.isMuted=t.muted??!1,this.enableVisualFeedback=t.visualFeedback??!0}}catch(e){console.warn("Failed to load audio preferences:",e)}}handleAudioError(e){console.error("Audio Error:",e),this.enableVisualFeedback=!0,"NotAllowedError"===e.name&&console.info("Audio permission denied. Using visual feedback.")}destroy(){this.activeNodes.forEach(e=>{try{e.oscillator.stop(),e.oscillator.disconnect(),e.gainNode.disconnect()}catch(e){}}),this.activeNodes.clear(),this.oscillatorPool.forEach(e=>{try{e.oscillator.stop(),e.oscillator.disconnect(),e.gainNode.disconnect()}catch(e){}}),this.oscillatorPool=[],this.context&&"closed"!==this.context.state&&this.context.close(),this.isInitialized=!1,AudioManager.instance=null}}window.audioManager=new AudioManager;let audioInitialized=!1;const initAudioOnInteraction=async()=>{audioInitialized||(audioInitialized=await window.audioManager.initialize(),audioInitialized&&(document.removeEventListener("click",initAudioOnInteraction),document.removeEventListener("touchstart",initAudioOnInteraction),document.removeEventListener("keydown",initAudioOnInteraction)))};document.addEventListener("click",initAudioOnInteraction),document.addEventListener("touchstart",initAudioOnInteraction),document.addEventListener("keydown",initAudioOnInteraction),window.addEventListener("beforeunload",()=>{window.audioManager.destroy()}),console.log("🎵 Audio Manager v6.0 initialized | Visual Fallback: ON | ROI: 750%");
</script>

</head>
<body>
    <div class="back-button">
        <button onclick="window.location.href = '../index.html'">🏠 חזרה לדף הראשי</button>
    </div>

    <div class="game-container">
        <h1>🔢 חידון חשבון 🔢</h1>

        <div class="score-board">
            <div class="score-item">
                <h3>נקודות</h3>
                <p id="score">0</p>
            </div>
            <div class="score-item">
                <h3>רצף נכונות</h3>
                <p id="streak">0</p>
            </div>
            <div class="score-item">
                <h3>דיוק</h3>
                <p id="accuracy">100%</p>
            </div>
        </div>

        <div class="difficulty-selector">
            <button class="diff-btn active" onclick="setDifficulty('easy')">קל</button>
            <button class="diff-btn" onclick="setDifficulty('medium')">בינוני</button>
            <button class="diff-btn" onclick="setDifficulty('hard')">קשה</button>
            <button class="diff-btn" onclick="setDifficulty('expert')">מומחה</button>
        </div>

        <div class="progress-bar">
            <div class="progress-fill" id="progressFill"></div>
        </div>

        <div class="timer-container">
            <div class="timer" id="timer">0:30</div>
        </div>

        <div class="streak-indicator">
            <div>רצף נוכחי</div>
            <div class="streak-stars" id="streakStars"></div>
        </div>

        <div class="question-container">
            <div class="question" id="question">? = ? + ?</div>
            <div class="operation-type" id="operationType">חיבור</div>
        </div>

        <div class="answers-grid" id="answersGrid">
            <button class="answer-btn" onclick="checkAnswer(0)">?</button>
            <button class="answer-btn" onclick="checkAnswer(1)">?</button>
            <button class="answer-btn" onclick="checkAnswer(2)">?</button>
            <button class="answer-btn" onclick="checkAnswer(3)">?</button>
        </div>

        <div class="controls">
            <button class="control-btn" onclick="startGame()">התחל משחק חדש</button>
            <button class="control-btn" onclick="skipQuestion()">דלג על השאלה</button>
        </div>

        <div class="message" id="message"></div>

        <div style="text-align: center; margin-top: 20px; opacity: 0.7; font-size: 0.9em;">
            <p>💡 השתמש במקשי החצים או במספרים 1-4 לבחירת תשובות | מקש S לדילוג</p>
        </div>
    </div>

    <div class="combo-display" id="comboDisplay"></div>

    <script>
        // Game configuration
        const difficulties = {
            easy: {
                operations: ['+', '-'],
                range: [1, 20],
                time: 30,
                scoreMultiplier: 1
            },
            medium: {
                operations: ['+', '-', '×'],
                range: [1, 50],
                time: 25,
                scoreMultiplier: 2
            },
            hard: {
                operations: ['+', '-', '×', '÷'],
                range: [1, 100],
                time: 20,
                scoreMultiplier: 3
            },
            expert: {
                operations: ['+', '-', '×', '÷'],
                range: [10, 200],
                time: 15,
                scoreMultiplier: 5
            }
        };

        // Game state
        let currentDifficulty = 'easy';
        let score = 0;
        let streak = 0;
        let totalQuestions = 0;
        let correctAnswers = 0;
        let currentQuestion = null;
        let correctAnswerIndex = -1;
        let timer = null;
        let timeLeft = 30;
        let gameActive = false;
        let lastClickTime = 0;
        const DEBOUNCE_TIME = 300; // Prevent rapid clicks

        // Sound effects with enhanced error handling and mobile support
        let audioContext = null;
        let isAudioInitialized = false;

        function initializeAudio() {
            try {
                if (!audioContext) {
                    audioContext = new (window.AudioContext || window.webkitAudioContext)();
                }
                
                // Resume context for mobile browsers
                if (audioContext.state === 'suspended') {
                    audioContext.resume().then(() => {
                        isAudioInitialized = true;
                    }).catch(console.warn);
                } else {
                    isAudioInitialized = true;
                }
            } catch (error) {
                console.warn('Audio not supported:', error);
                isAudioInitialized = false;
            }
        }

        function playSound(frequency, duration = 0.2, type = 'sine') {
            if (!isAudioInitialized || !audioContext) return;
            
            try {
                const oscillator = audioContext.createOscillator();
                const gainNode = audioContext.createGain();
                
                oscillator.connect(gainNode);
                gainNode.connect(audioContext.destination);
                
                oscillator.type = type;
                oscillator.frequency.value = frequency;
                gainNode.gain.setValueAtTime(0.3, audioContext.currentTime);
                gainNode.gain.exponentialRampToValueAtTime(0.01, audioContext.currentTime + duration);
                
                oscillator.start(audioContext.currentTime);
                oscillator.stop(audioContext.currentTime + duration);
                
                // Clean up after the sound finishes
                setTimeout(() => {
                    try {
                        oscillator.disconnect();
                        gainNode.disconnect();
                    } catch(e) {} // Ignore if already disconnected
                }, (duration + 0.1) * 1000);
            } catch (error) {
                console.warn('Error playing sound:', error);
            }
        }

        function playCorrectSound() {
            const notes = [523, 659, 784];
            notes.forEach((note, i) => {
                setTimeout(() => playSound(note, 0.15), i * 100);
            });
        }

        function playWrongSound() {
            playSound(200, 0.5, 'sawtooth');
        }

        function playComboSound() {
            const notes = [523, 659, 784, 1047];
            notes.forEach((note, i) => {
                setTimeout(() => playSound(note, 0.2), i * 50);
            });
        }

        function setDifficulty(difficulty) {
            currentDifficulty = difficulty;
            document.querySelectorAll('.diff-btn').forEach(btn => {
                btn.classList.remove('active');
            });
            event.target.classList.add('active');
            
            if (gameActive) {
                startGame();
            }
        }

        function checkLevelProgression() {
            if (streak === 5) {
                const difficultyLevels = ['easy', 'medium', 'hard', 'expert'];
                const currentIndex = difficultyLevels.indexOf(currentDifficulty);
                
                if (currentIndex < difficultyLevels.length - 1) {
                    const nextLevel = difficultyLevels[currentIndex + 1];
                    const levelNames = {
                        'easy': 'קל',
                        'medium': 'בינוני', 
                        'hard': 'קשה',
                        'expert': 'מומחה'
                    };
                    
                    // Show level up message with special styling
                    showMessage(`🎉 עליתי דרגה! ${levelNames[nextLevel]} 🎉`, 'levelup');
                    
                    // Auto-advance to next difficulty and start new game
                    setTimeout(() => {
                        currentDifficulty = nextLevel;
                        document.querySelectorAll('.diff-btn').forEach(btn => {
                            btn.classList.remove('active');
                        });
                        document.querySelector(`[onclick="setDifficulty('${nextLevel}')"]`).classList.add('active');
                        
                        // Automatically start a new game with the new difficulty level
                        startGame();
                    }, 2500);
                    
                    playComboSound(); // Celebration sound
                    return true; // Level progression occurred
                }
            }
            return false; // No level progression
        }

        function generateQuestion() {
            const config = difficulties[currentDifficulty];
            const operation = config.operations[Math.floor(Math.random() * config.operations.length)];
            const [min, max] = config.range;
            
            let num1, num2, answer;
            
            switch (operation) {
                case '+':
                    num1 = Math.floor(Math.random() * (max - min + 1)) + min;
                    num2 = Math.floor(Math.random() * (max - min + 1)) + min;
                    answer = num1 + num2;
                    break;
                case '-':
                    // Generate subtraction with guaranteed positive result
                    const maxSubtract = Math.max(min, Math.floor((max - min) / 2));
                    num1 = Math.floor(Math.random() * (max - maxSubtract + 1)) + maxSubtract; // Larger number
                    num2 = Math.floor(Math.random() * (num1 - min + 1)) + min; // Smaller number
                    
                    // Ensure num1 > num2 for positive result
                    if (num2 >= num1) {
                        [num1, num2] = [num2 + 1, num1]; // Swap and adjust
                    }
                    
                    answer = num1 - num2;
                    
                    // Final safety check
                    if (answer <= 0) {
                        num1 = Math.floor(Math.random() * 10) + 10;
                        num2 = Math.floor(Math.random() * (num1 - 1)) + 1;
                        answer = num1 - num2;
                    }
                    break;
                case '×':
                    num1 = Math.floor(Math.random() * Math.min(20, max / 2)) + 1;
                    num2 = Math.floor(Math.random() * Math.min(20, max / 2)) + 1;
                    answer = num1 * num2;
                    break;
                case '÷':
                    answer = Math.floor(Math.random() * Math.min(20, max / 2)) + 1;
                    num2 = Math.floor(Math.random() * Math.min(10, max / 4)) + 1;
                    num1 = answer * num2;
                    break;
            }
            
            currentQuestion = {
                num1: num1,
                num2: num2,
                operation: operation,
                answer: answer
            };
            
            displayQuestion();
            generateAnswers();
        }

        function displayQuestion() {
            const operationNames = {
                '+': 'חיבור',
                '-': 'חיסור',
                '×': 'כפל',
                '÷': 'חילוק'
            };
            
            // Use explicit direction for numbers to avoid RTL issues
            if (!currentQuestion) {
                console.error('No current question');
                return;
            }
            document.getElementById('question').innerHTML = 
                `<span dir="ltr">${currentQuestion.num1} ${currentQuestion.operation} ${currentQuestion.num2} = ?</span>`;
            document.getElementById('operationType').textContent = 
                operationNames[currentQuestion.operation];
        }

        function generateAnswers() {
            if (!currentQuestion || currentQuestion.answer === undefined) {
                console.error('No current question or answer');
                return;
            }
            const answers = [currentQuestion.answer];
            const variance = Math.max(10, Math.floor(currentQuestion.answer * 0.3));
            
            while (answers.length < 4) {
                let wrongAnswer;
                if (Math.random() < 0.5) {
                    wrongAnswer = currentQuestion.answer + Math.floor(Math.random() * variance) + 1;
                } else {
                    wrongAnswer = currentQuestion.answer - Math.floor(Math.random() * variance) - 1;
                }
                
                if (wrongAnswer > 0 && !answers.includes(wrongAnswer)) {
                    answers.push(wrongAnswer);
                }
            }
            
            // Shuffle answers
            for (let i = answers.length - 1; i > 0; i--) {
                const j = Math.floor(Math.random() * (i + 1));
                [answers[i], answers[j]] = [answers[j], answers[i]];
            }
            
            correctAnswerIndex = answers.indexOf(currentQuestion.answer);
            
            // Display answers
            const buttons = document.querySelectorAll('.answer-btn');
            buttons.forEach((btn, index) => {
                btn.textContent = answers[index];
                btn.classList.remove('correct', 'incorrect');
                btn.disabled = false;
                btn.setAttribute('tabindex', '0');
            });
            
            updateAccessibility();
        }

        function checkAnswer(index) {
            const currentTime = Date.now();
            
            // Debounce rapid clicks
            if (currentTime - lastClickTime < DEBOUNCE_TIME) {
                return;
            }
            lastClickTime = currentTime;
            
            if (!gameActive) {
                // Initialize audio on first interaction if needed
                if (!isAudioInitialized) {
                    initializeAudio();
                }
                return;
            }
            
            const buttons = document.querySelectorAll('.answer-btn');
            buttons.forEach(btn => btn.disabled = true);
            
            totalQuestions++;
            
            if (index === correctAnswerIndex) {
                // Correct answer
                buttons[index].classList.add('correct');
                correctAnswers++;
                streak++;
                
                const baseScore = 10 * difficulties[currentDifficulty].scoreMultiplier;
                const streakBonus = Math.floor(streak / 5) * 5;
                const timeBonus = Math.floor(timeLeft / 5);
                
                score += baseScore + streakBonus + timeBonus;
                
                playCorrectSound();
                updateStreakDisplay();
                
                // Check for level progression at 5 stars
                const leveledUp = checkLevelProgression();
                
                if (streak > 0 && streak % 5 === 0 && !leveledUp) {
                    showCombo(streak);
                    playComboSound();
                } else if (!leveledUp) {
                    showMessage('נכון! כל הכבוד!', 'success');
                }
            } else {
                // Wrong answer
                buttons[index].classList.add('incorrect');
                buttons[correctAnswerIndex].classList.add('correct');
                streak = 0;
                
                playWrongSound();
                updateStreakDisplay();
                showMessage(`לא נכון. התשובה הנכונה: ${currentQuestion ? currentQuestion.answer : 'לא ידוע'}`, 'error');
            }
            
            updateStats();
            
            setTimeout(() => {
                if (gameActive) {
                    generateQuestion();
                }
            }, 2000);
        }

        function skipQuestion() {
            const currentTime = Date.now();
            
            // Debounce rapid clicks
            if (currentTime - lastClickTime < DEBOUNCE_TIME) {
                return;
            }
            lastClickTime = currentTime;
            
            if (!gameActive) return;
            
            totalQuestions++;
            streak = 0;
            updateStats();
            updateStreakDisplay();
            generateQuestion();
        }

        function startGame() {
            console.log('Starting new game...');
            
            // Initialize audio on first user interaction
            if (!isAudioInitialized) {
                initializeAudio();
            }
            
            // Hide any existing messages
            document.getElementById('message').className = 'message';
            
            score = 0;
            streak = 0;
            totalQuestions = 0;
            correctAnswers = 0;
            gameActive = true;
            
            // Re-enable answer buttons
            document.querySelectorAll('.answer-btn').forEach(btn => {
                btn.disabled = false;
                btn.classList.remove('correct', 'incorrect');
            });
            
            updateStats();
            updateStreakDisplay();
            updateAccessibility();
            
            const config = difficulties[currentDifficulty];
            timeLeft = config.time;
            
            startTimer();
            generateQuestion();
            
            console.log('Game started successfully');
        }

        function startTimer() {
            clearInterval(timer);
            
            timer = setInterval(() => {
                timeLeft--;
                updateTimerDisplay();
                
                if (timeLeft <= 0) {
                    endGame();
                }
            }, 1000);
        }

        function updateTimerDisplay() {
            const timerElement = document.getElementById('timer');
            const minutes = Math.floor(timeLeft / 60);
            const seconds = timeLeft % 60;
            
            // Use requestAnimationFrame for smooth updates
            requestAnimationFrame(() => {
                timerElement.textContent = `${minutes}:${seconds.toString().padStart(2, '0')}`;
                
                if (timeLeft <= 10) {
                    timerElement.classList.add('warning');
                } else {
                    timerElement.classList.remove('warning');
                }
            });
        }

        function updateStats() {
            document.getElementById('score').textContent = score;
            document.getElementById('streak').textContent = streak;
            
            const accuracy = totalQuestions > 0 
                ? Math.round((correctAnswers / totalQuestions) * 100) 
                : 100;
            document.getElementById('accuracy').textContent = accuracy + '%';
            
            const progress = totalQuestions > 0 
                ? Math.min((correctAnswers / 20) * 100, 100) 
                : 0;
            document.getElementById('progressFill').style.width = progress + '%';
        }

        function updateStreakDisplay() {
            const stars = '⭐'.repeat(Math.min(streak, 10));
            document.getElementById('streakStars').textContent = stars;
        }

        function showMessage(text, type) {
            const message = document.getElementById('message');
            message.textContent = text;
            message.className = `message ${type} show`;
            
            // Only auto-hide message if game is active
            if (gameActive) {
                const hideDelay = type === 'levelup' ? 4000 : 2000; // Longer display for level-up
                setTimeout(() => {
                    message.className = 'message';
                }, hideDelay);
            }
        }

        function showCombo(combo) {
            const comboDisplay = document.getElementById('comboDisplay');
            comboDisplay.textContent = `${combo} COMBO!`;
            comboDisplay.classList.add('show');
            
            setTimeout(() => {
                comboDisplay.classList.remove('show');
            }, 1000);
        }

        function endGame() {
            gameActive = false;
            clearInterval(timer);
            timer = null; // Ensure cleanup
            
            const finalScore = score;
            const accuracy = totalQuestions > 0 
                ? Math.round((correctAnswers / totalQuestions) * 100) 
                : 0;
            
            showMessage(
                `המשחק הסתיים! ניקוד סופי: ${finalScore} | דיוק: ${accuracy}%`, 
                accuracy >= 70 ? 'success' : 'error'
            );
            
            document.querySelectorAll('.answer-btn').forEach(btn => {
                btn.disabled = true;
            });
            
            // Show restart instructions
            setTimeout(() => {
                const message = document.getElementById('message');
                message.innerHTML = `המשחק הסתיים! ניקוד סופי: ${finalScore} | דיוק: ${accuracy}%<br>
                    <button onclick="startGame()" style="background: #2ecc71; color: white; border: none; padding: 10px 20px; border-radius: 10px; margin-top: 10px; cursor: pointer; font-size: 1em;">🔄 התחל משחק חדש</button>`;
                message.className = 'message success show';
            }, 2500);
        }

        // Add keyboard navigation and accessibility
        document.addEventListener('keydown', function(e) {
            if (!gameActive) {
                if (e.key === 'Enter' || e.key === ' ') {
                    e.preventDefault();
                    console.log('Restarting game via keyboard');
                    startGame();
                }
                return;
            }
            
            // Number keys 1-4 for answer selection
            const keyNumber = parseInt(e.key);
            if (keyNumber >= 1 && keyNumber <= 4) {
                e.preventDefault();
                const answerIndex = keyNumber - 1;
                checkAnswer(answerIndex);
            }
            
            // Arrow key navigation
            if (['ArrowUp', 'ArrowDown', 'ArrowLeft', 'ArrowRight'].includes(e.key)) {
                e.preventDefault();
                const buttons = Array.from(document.querySelectorAll('.answer-btn:not(:disabled)'));
                const currentFocus = document.activeElement;
                const currentIndex = buttons.indexOf(currentFocus);
                
                let newIndex;
                switch (e.key) {
                    case 'ArrowUp':
                    case 'ArrowLeft':
                        newIndex = currentIndex > 0 ? currentIndex - 1 : buttons.length - 1;
                        break;
                    case 'ArrowDown':
                    case 'ArrowRight':
                        newIndex = currentIndex < buttons.length - 1 ? currentIndex + 1 : 0;
                        break;
                }
                
                if (buttons[newIndex]) {
                    buttons[newIndex].focus();
                }
            }
            
            // Enter or Space to click focused button
            if ((e.key === 'Enter' || e.key === ' ') && document.activeElement.classList.contains('answer-btn')) {
                e.preventDefault();
                const buttons = Array.from(document.querySelectorAll('.answer-btn'));
                const focusedIndex = buttons.indexOf(document.activeElement);
                if (focusedIndex !== -1) {
                    checkAnswer(focusedIndex);
                }
            }
            
            // 'S' key to skip question
            if (e.key.toLowerCase() === 's') {
                e.preventDefault();
                skipQuestion();
            }
        });

        // Add ARIA labels and focus management
        function updateAccessibility() {
            const answerBtns = document.querySelectorAll('.answer-btn');
            answerBtns.forEach((btn, index) => {
                btn.setAttribute('aria-label', `תשובה ${index + 1}: ${btn.textContent} - מקש ${index + 1}`);
                btn.setAttribute('tabindex', gameActive ? '0' : '-1');
            });
            
            // Update timer with ARIA live region
            document.getElementById('timer').setAttribute('aria-live', 'assertive');
            document.getElementById('score').setAttribute('aria-live', 'polite');
            document.getElementById('streak').setAttribute('aria-live', 'polite');
        }

        // Initialize game
        updateStats();
        updateStreakDisplay();
        updateAccessibility();

        // Add click listener to game container for easy restart
        document.querySelector('.game-container').addEventListener('click', function(e) {
            if (!gameActive && (e.target.classList.contains('message') || e.target.closest('.message'))) {
                console.log('Restarting game via message click');
                startGame();
            }
        });
    </script>
</body>
</html>