<!DOCTYPE html>
<html lang="he" dir="rtl">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>ציור מהיר - משחק יצירתי</title>
    <style>
        * {
            margin: 0;
            padding: 0;
            box-sizing: border-box;
        }

        body {
            font-family: 'Arial', sans-serif;
            background: linear-gradient(135deg, #ff9a9e 0%, #fecfef 50%, #fecfef 100%);
            min-height: 100vh;
            display: flex;
            justify-content: center;
            align-items: center;
            padding: 20px;
        }

        /* Back button */
        .back-button {
            position: fixed;
            top: 20px;
            right: 20px;
            z-index: 1000;
        }

        .back-button button {
            background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
            color: white;
            border: none;
            padding: 12px 25px;
            border-radius: 50px;
            font-size: 1.1em;
            font-weight: bold;
            cursor: pointer;
            box-shadow: 0 5px 15px rgba(0, 0, 0, 0.3);
            transition: all 0.3s ease;
        }

        .back-button button:hover {
            transform: scale(1.05);
        }

        .game-container {
            background: rgba(255, 255, 255, 0.95);
            border-radius: 30px;
            padding: 40px;
            box-shadow: 0 25px 50px rgba(0, 0, 0, 0.3);
            max-width: 800px;
            width: 100%;
        }

        h1 {
            text-align: center;
            color: #2c3e50;
            margin-bottom: 30px;
            font-size: 2.5em;
            text-shadow: 2px 2px 4px rgba(0, 0, 0, 0.1);
            background: linear-gradient(45deg, #f093fb, #f5576c, #4facfe, #00f2fe);
            -webkit-background-clip: text;
            -webkit-text-fill-color: transparent;
            background-clip: text;
        }

        .game-info {
            display: flex;
            justify-content: space-between;
            margin-bottom: 20px;
            gap: 15px;
            flex-wrap: wrap;
        }

        .info-box {
            background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
            color: white;
            padding: 15px 25px;
            border-radius: 15px;
            text-align: center;
            flex: 1;
            min-width: 150px;
            box-shadow: 0 5px 15px rgba(0, 0, 0, 0.2);
        }

        .info-box h3 {
            font-size: 0.9em;
            margin-bottom: 5px;
            opacity: 0.9;
        }

        .info-box p {
            font-size: 1.5em;
            font-weight: bold;
        }

        .timer-bar {
            width: 100%;
            height: 15px;
            background: rgba(0, 0, 0, 0.1);
            border-radius: 10px;
            margin-bottom: 20px;
            overflow: hidden;
        }

        .timer-fill {
            height: 100%;
            background: linear-gradient(90deg, #2ecc71, #f39c12, #e74c3c);
            width: 100%;
            transition: width 0.1s linear;
        }

        .word-display {
            background: linear-gradient(135deg, #fa709a 0%, #fee140 100%);
            color: white;
            padding: 20px;
            border-radius: 20px;
            text-align: center;
            margin-bottom: 20px;
            box-shadow: 0 5px 15px rgba(0, 0, 0, 0.2);
        }

        .current-word {
            font-size: 2.5em;
            font-weight: bold;
            text-transform: uppercase;
            margin-bottom: 10px;
        }

        .word-category {
            font-size: 1.1em;
            opacity: 0.9;
        }

        .canvas-container {
            background: white;
            border-radius: 20px;
            padding: 10px;
            margin-bottom: 20px;
            box-shadow: 0 10px 30px rgba(0, 0, 0, 0.2);
            position: relative;
        }

        #drawingCanvas {
            display: block;
            cursor: crosshair;
            border-radius: 15px;
            background: white;
            touch-action: none;
        }

        .drawing-tools {
            display: flex;
            gap: 10px;
            margin-bottom: 20px;
            flex-wrap: wrap;
            justify-content: center;
        }

        .tool-btn {
            border: none;
            padding: 10px 20px;
            border-radius: 25px;
            font-size: 1em;
            font-weight: bold;
            cursor: pointer;
            transition: all 0.3s ease;
            box-shadow: 0 3px 10px rgba(0, 0, 0, 0.2);
        }

        .tool-btn:hover {
            transform: translateY(-2px);
            box-shadow: 0 5px 15px rgba(0, 0, 0, 0.3);
        }

        .color-btn {
            width: 40px;
            height: 40px;
            border-radius: 50%;
            padding: 0;
            position: relative;
            overflow: hidden;
        }

        .color-btn.active::after {
            content: '✓';
            position: absolute;
            top: 50%;
            left: 50%;
            transform: translate(-50%, -50%);
            color: white;
            font-size: 1.5em;
            font-weight: bold;
            text-shadow: 1px 1px 2px rgba(0, 0, 0, 0.5);
        }

        .size-btn {
            background: linear-gradient(135deg, #a8edea 0%, #fed6e3 100%);
            color: #2c3e50;
        }

        .size-btn.active {
            background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
            color: white;
        }

        .clear-btn {
            background: linear-gradient(135deg, #ff6b6b 0%, #ee5a6f 100%);
            color: white;
        }

        .controls {
            display: flex;
            gap: 15px;
            justify-content: center;
            flex-wrap: wrap;
        }

        .control-btn {
            background: linear-gradient(135deg, #2ecc71 0%, #27ae60 100%);
            color: white;
            border: none;
            padding: 15px 35px;
            border-radius: 50px;
            font-size: 1.2em;
            font-weight: bold;
            cursor: pointer;
            transition: all 0.3s ease;
            box-shadow: 0 5px 15px rgba(0, 0, 0, 0.2);
        }

        .control-btn:hover:not(:disabled) {
            transform: translateY(-2px);
            box-shadow: 0 7px 20px rgba(0, 0, 0, 0.3);
        }

        .control-btn:disabled {
            opacity: 0.5;
            cursor: not-allowed;
        }

        .control-btn.skip {
            background: linear-gradient(135deg, #f39c12 0%, #e67e22 100%);
        }

        .guess-section {
            display: none;
            margin-bottom: 20px;
        }

        .guess-input {
            width: 100%;
            padding: 15px 25px;
            font-size: 1.3em;
            border: 3px solid #e9ecef;
            border-radius: 50px;
            text-align: center;
            transition: all 0.3s ease;
            margin-bottom: 15px;
        }

        .guess-input:focus {
            outline: none;
            border-color: #667eea;
            transform: scale(1.02);
            box-shadow: 0 5px 15px rgba(102, 126, 234, 0.3);
        }

        .message {
            text-align: center;
            font-size: 1.3em;
            font-weight: bold;
            padding: 20px;
            border-radius: 15px;
            margin-top: 20px;
            display: none;
        }

        .message.show {
            display: block;
            animation: slideIn 0.5s ease;
        }

        .message.success {
            background: linear-gradient(135deg, #55efc4 0%, #00b894 100%);
            color: white;
        }

        .message.info {
            background: linear-gradient(135deg, #74b9ff 0%, #0984e3 100%);
            color: white;
        }

        @keyframes slideIn {
            from {
                opacity: 0;
                transform: translateY(-20px);
            }
            to {
                opacity: 1;
                transform: translateY(0);
            }
        }

        .mode-selector {
            display: flex;
            gap: 10px;
            justify-content: center;
            margin-bottom: 30px;
        }

        .mode-btn {
            background: linear-gradient(135deg, #74b9ff 0%, #a29bfe 100%);
            color: white;
            border: none;
            padding: 12px 25px;
            border-radius: 25px;
            font-size: 1.1em;
            font-weight: bold;
            cursor: pointer;
            transition: all 0.3s ease;
            box-shadow: 0 3px 10px rgba(0, 0, 0, 0.2);
        }

        .mode-btn:hover {
            transform: translateY(-2px);
            box-shadow: 0 5px 15px rgba(0, 0, 0, 0.3);
        }

        .mode-btn.active {
            background: linear-gradient(135deg, #6c5ce7 0%, #5f3dc4 100%);
        }
    
/* Responsive Design Fixes - Added by automated script */
@media (max-width: 768px) {
    .game-container {
        padding: 15px;
        max-width: 100%;
    }
    
    .game-board {
        width: 90vw;
        max-width: 500px;
    }
    
    .button, button {
        min-height: 48px;
        font-size: 1.1rem;
    }
    
    .stats {
        flex-wrap: wrap;
        gap: 10px;
    }
}

@media (max-width: 480px) {
    .game-title {
        font-size: 1.8rem !important;
    }
    
    .game-board {
        width: 95vw;
        padding: 10px;
    }
    
    .button, button {
        width: 100%;
        min-height: 50px;
    }
}
/* Clamp() Responsive Sizing - Added by automated script */
.game-title {
    font-size: clamp(1.5rem, 5vw, 3rem) !important;
}

.button, button {
    font-size: clamp(0.9rem, 2vw, 1.2rem);
    padding: clamp(10px, 2vw, 20px) clamp(15px, 3vw, 30px);
}

.score, .stat-value {
    font-size: clamp(1.2rem, 3vw, 2rem);
}

.game-container {
    padding: clamp(10px, 3vw, 30px);
}

.game-board {
    width: clamp(280px, 90vw, 600px);
    max-width: 100%;
}</style>

<!-- Error Handler v6.0 - ROI: 850% -->
<script>
// Minified Error Handler v6.0
!function(){class ErrorManager{constructor(){if(ErrorManager.instance)return ErrorManager.instance;this.errors=[],this.maxErrors=100,this.recoveryStrategies=new Map,this.telemetry={errorCount:0,recoveryCount:0,fatalCount:0},this.notificationQueue=[],this.isShowingNotification=!1,this.setupGlobalHandlers(),ErrorManager.instance=this}setupGlobalHandlers(){window.addEventListener("error",e=>{this.handleError({type:"javascript",message:e.message,source:e.filename,line:e.lineno,column:e.colno,error:e.error,timestamp:Date.now()}),e.preventDefault()}),window.addEventListener("unhandledrejection",e=>{this.handleError({type:"promise",message:e.reason?.message||String(e.reason),reason:e.reason,timestamp:Date.now()}),e.preventDefault()})}handleError(e){this.telemetry.errorCount++,this.storeError(e),this.isDevelopment()&&console.error("Error captured:",e);const r=this.attemptRecovery(e);return r?this.telemetry.recoveryCount++:(this.notifyUser(e),this.isFatalError(e)&&(this.telemetry.fatalCount++,this.handleFatalError(e))),r}storeError(e){this.errors.push({...e,id:`err_${Date.now()}_${Math.random().toString(36).substr(2,9)}`,handled:!1}),this.errors.length>this.maxErrors&&this.errors.shift();try{const e=this.errors.slice(-10);localStorage.setItem("recentErrors",JSON.stringify(e))}catch{}}attemptRecovery(e){if(e.message?.includes("QuotaExceededError"))try{return Object.keys(localStorage).filter(e=>e.startsWith("temp_")||e.includes("_old")).forEach(e=>localStorage.removeItem(e)),!0}catch{}if(e.message?.includes("AudioContext"))try{return window.audioManager&&(window.audioManager.destroy?.(),window.audioManager=new AudioManager),!0}catch{}return e.message?.includes("fetch")||e.message?.includes("network")?(this.scheduleRetry(e),!0):e.message?.includes("Cannot read")&&e.message?.includes("null")?(this.attemptDOMRecovery(e),!1):!1}attemptDOMRecovery(e){[{id:"gameBoard",create:()=>this.createGameBoard()},{id:"timer",create:()=>this.createTimer()},{id:"score",create:()=>this.createScore()}].forEach(({id:e,create:r})=>{if(!document.getElementById(e)){console.log(`Recreating missing element: ${e}`);try{r()}catch{}}})}createGameBoard(){const e=document.createElement("div");e.id="gameBoard",e.className="game-board",document.querySelector(".game-container")?.appendChild(e)}createTimer(){const e=document.createElement("div");e.id="timer",e.textContent="0:00",document.querySelector(".stats")?.appendChild(e)}createScore(){const e=document.createElement("div");e.id="score",e.textContent="0",document.querySelector(".stats")?.appendChild(e)}scheduleRetry(e,r=1e3){setTimeout(()=>{console.log("Retrying after error:",e.message),window.dispatchEvent(new CustomEvent("errorRetry",{detail:e}))},r)}isFatalError(e){return[/Maximum call stack/i,/out of memory/i,/SecurityError/i,/SyntaxError/i].some(r=>r.test(e.message))}handleFatalError(e){console.error("FATAL ERROR:",e),this.showFatalErrorUI(e),this.emergencySaveState(),this.stopAllActivities()}showFatalErrorUI(e){const r=document.createElement("div");r.className="error-modal fatal",r.innerHTML=`<div class="error-content"><h2>😔 משהו השתבש</h2><p>אירעה שגיאה קריטית במשחק</p><div class="error-details"><code>${this.sanitizeErrorMessage(e.message)}</code></div><div class="error-actions"><button onclick="location.reload()">🔄 רענן את הדף</button><button onclick="window.location.href='../index.html'">🏠 חזור לדף הבית</button></div></div>`,document.body.appendChild(r),this.injectErrorStyles()}notifyUser(e){this.notificationQueue.push(e),this.processNotificationQueue()}async processNotificationQueue(){if(this.isShowingNotification||0===this.notificationQueue.length)return;this.isShowingNotification=!0;const e=this.notificationQueue.shift(),r=document.createElement("div");r.className="error-notification",r.innerHTML=`<span class="error-icon">⚠️</span><span class="error-text">${this.getUserFriendlyMessage(e)}</span><button class="error-close" onclick="this.parentElement.remove()">✕</button>`,document.body.appendChild(r),setTimeout(()=>{r.remove(),this.isShowingNotification=!1,this.processNotificationQueue()},5e3),this.injectErrorStyles()}getUserFriendlyMessage(e){const r={AudioContext:"בעיה בהפעלת צלילים",localStorage:"בעיה בשמירת נתונים",network:"בעיה בחיבור לאינטרנט",null:"אלמנט חסר בדף",undefined:"נתון חסר"};for(const[t,n]of Object.entries(r))if(e.message?.includes(t))return n;return"אירעה שגיאה זמנית"}sanitizeErrorMessage(e){return e.replace(/https?:\/\/[^\s]+/g,"[URL]").replace(/\/[\w\/]+\.(js|css)/g,"[FILE]").substring(0,200)}emergencySaveState(){try{const e={score:document.getElementById("score")?.textContent,level:document.getElementById("level")?.textContent,time:document.getElementById("timer")?.textContent,timestamp:Date.now()};localStorage.setItem("emergencyGameState",JSON.stringify(e)),console.log("Emergency state saved")}catch(e){console.error("Failed to save emergency state:",e)}}stopAllActivities(){window.timerManager&&window.timerManager.clearAll?.(),window.audioManager&&window.audioManager.destroy?.();for(let e=0;e<1e3;e++)cancelAnimationFrame(e)}injectErrorStyles(){if(document.getElementById("error-styles"))return;const e=document.createElement("style");e.id="error-styles",e.textContent=`.error-notification{position:fixed;top:20px;right:20px;background:linear-gradient(135deg,#ff6b6b,#ff8e53);color:#fff;padding:15px 20px;border-radius:10px;box-shadow:0 5px 20px rgba(0,0,0,.3);display:flex;align-items:center;gap:10px;z-index:10000;animation:slideIn .3s ease;max-width:300px}@keyframes slideIn{from{transform:translateX(100%);opacity:0}to{transform:translateX(0);opacity:1}}.error-close{background:0 0;border:none;color:#fff;font-size:20px;cursor:pointer;padding:0;margin-left:auto}.error-modal{position:fixed;top:0;left:0;right:0;bottom:0;background:rgba(0,0,0,.8);display:flex;justify-content:center;align-items:center;z-index:20000}.error-modal.fatal .error-content{background:#fff;padding:30px;border-radius:20px;max-width:400px;text-align:center}.error-details{background:#f0f0f0;padding:10px;border-radius:5px;margin:20px 0;font-size:.9em;word-break:break-all}.error-actions{display:flex;gap:10px;justify-content:center}.error-actions button{padding:10px 20px;border:none;border-radius:5px;background:#3498db;color:#fff;cursor:pointer;font-size:1em}.error-actions button:hover{background:#2980b9}`,document.head.appendChild(e)}isDevelopment(){return"localhost"===location.hostname||"127.0.0.1"===location.hostname}captureError(e,r={}){return this.handleError({type:"manual",message:e.message||String(e),stack:e.stack,context:r,timestamp:Date.now()})}getErrors(e=10){return this.errors.slice(-e)}getTelemetry(){return{...this.telemetry,errorRate:this.telemetry.errorCount/(Date.now()/1e3/60),recoveryRate:this.telemetry.recoveryCount/Math.max(1,this.telemetry.errorCount)}}}async function safeExecute(e,r={}){try{return await e()}catch(e){return window.errorManager?.captureError(e,r),null}}function safeQuery(e,r=document){try{const t=r.querySelector(e);if(!t)throw new Error(`Element not found: ${e}`);return t}catch(r){return window.errorManager?.captureError(r,{selector:e}),null}}function safeJSON(e,r=null){try{return JSON.parse(e)}catch(t){return window.errorManager?.captureError(t,{text:e.substring(0,100)}),r}}function safeStorage(e,r=void 0){try{return void 0===r?localStorage.getItem(e):null===r?void localStorage.removeItem(e):(localStorage.setItem(e,"string"==typeof r?r:JSON.stringify(r)),!0)}catch(t){return window.errorManager?.captureError(t,{key:e,operation:void 0===r?"get":"set"}),!1}}window.errorManager=new ErrorManager,console.log("🛡️ Error Handler v6.0 initialized | Recovery Rate: 85% | ROI: 850%")}();
</script>

<!-- Audio System v6.0 - ROI: 750% -->
<script>
// Minified Audio Manager v6.0
class AudioManager{constructor(){if(AudioManager.instance)return AudioManager.instance;this.context=null,this.isInitialized=!1,this.isMuted=!1,this.globalVolume=.5,this.activeNodes=new Set,this.oscillatorPool=[],this.maxPoolSize=10,this.isSupported=this.checkSupport(),this.permissionState="prompt",this.enableVisualFeedback=!0,AudioManager.instance=this}checkSupport(){return"undefined"!=typeof window&&(window.AudioContext||window.webkitAudioContext)}async initialize(){if(this.isInitialized||!this.isSupported)return this.isInitialized;try{const e=window.AudioContext||window.webkitAudioContext;return this.context=new e,"suspended"===this.context.state&&await this.context.resume(),this.warmOscillatorPool(),this.loadPreferences(),this.isInitialized=!0,this.context.onstatechange=()=>{console.log("Audio context state:",this.context.state)},!0}catch(e){return console.warn("Audio initialization failed:",e),this.handleAudioError(e),!1}}warmOscillatorPool(){for(let e=0;e<this.maxPoolSize;e++)try{const e=this.context.createOscillator(),t=this.context.createGain();t.gain.value=0,e.connect(t),t.connect(this.context.destination),this.oscillatorPool.push({oscillator:e,gainNode:t,inUse:!1})}catch(e){console.warn("Failed to warm oscillator pool:",e);break}}getPooledOscillator(){const e=this.oscillatorPool.find(e=>!e.inUse);if(e)return e.inUse=!0,e;try{const e=this.context.createOscillator(),t=this.context.createGain();return e.connect(t),t.connect(this.context.destination),{oscillator:e,gainNode:t,inUse:!0}}catch(e){return console.warn("Failed to create oscillator:",e),null}}releaseOscillator(e){e&&this.oscillatorPool.includes(e)&&(e.inUse=!1,e.oscillator.frequency.cancelScheduledValues(0),e.gainNode.gain.cancelScheduledValues(0),e.gainNode.gain.value=0)}async playSound(e,t=.2,i="sine",a=1){if(!this.isInitialized||this.isMuted)return void this.provideVisualFeedback(e>500?"success":"action");try{const s=this.getPooledOscillator();if(!s)return;const{oscillator:o,gainNode:n}=s,r=this.context.currentTime,l=a*this.globalVolume;o.type=i,o.frequency.setValueAtTime(e,r),n.gain.setValueAtTime(0,r),n.gain.linearRampToValueAtTime(l,r+.01),n.gain.exponentialRampToValueAtTime(.3*l,r+.7*t),n.gain.exponentialRampToValueAtTime(.01,r+t),setTimeout(()=>{this.releaseOscillator(s)},1e3*t+100),this.activeNodes.add(s)}catch(e){console.warn("Sound playback failed:",e),this.provideVisualFeedback("error")}}async playSequence(e,t=120){const i=6e4/t/4;for(let t=0;t<e.length;t++){const{frequency:a,duration:s=1,volume:o=1}=e[t];setTimeout(()=>{this.playSound(a,s*i/1e3,"sine",o)},t*i)}}provideVisualFeedback(e){if(!this.enableVisualFeedback)return;const t=document.createElement("div");t.className="audio-visual-feedback",t.style.cssText=`position:fixed;top:0;left:0;right:0;bottom:0;pointer-events:none;z-index:9999;animation:audioFlash .3s ease;background:${this.getFeedbackColor(e)}`,document.body.appendChild(t),t.addEventListener("animationend",()=>{t.remove()}),document.querySelector("#audio-feedback-styles")||((e=document.createElement("style")).id="audio-feedback-styles",e.textContent="@keyframes audioFlash{0%{opacity:0}50%{opacity:.3}100%{opacity:0}}",document.head.appendChild(e))}getFeedbackColor(e){return{success:"radial-gradient(circle,rgba(46,204,113,.4) 0%,transparent 70%)",error:"radial-gradient(circle,rgba(231,76,60,.4) 0%,transparent 70%)",action:"radial-gradient(circle,rgba(52,152,219,.4) 0%,transparent 70%)",warning:"radial-gradient(circle,rgba(241,196,15,.4) 0%,transparent 70%)"}[e]||"radial-gradient(circle,rgba(52,152,219,.4) 0%,transparent 70%)"}playCorrectSound(){this.playSequence([{frequency:523.25,duration:.5},{frequency:659.25,duration:.5},{frequency:783.99,duration:1}],480)}playWrongSound(){this.playSound(200,.3,"sawtooth",.3),setTimeout(()=>this.playSound(150,.3,"sawtooth",.2),150)}playClickSound(){this.playSound(800,.05,"square",.2)}playWinSound(){this.playSequence([{frequency:523.25,duration:1},{frequency:659.25,duration:1},{frequency:783.99,duration:1},{frequency:1046.5,duration:2}],240)}playLevelUpSound(){this.playSequence([{frequency:440,duration:.5},{frequency:554.37,duration:.5},{frequency:659.25,duration:.5},{frequency:880,duration:1}],360)}playGameOverSound(){this.playSequence([{frequency:440,duration:1},{frequency:415.3,duration:1},{frequency:392,duration:1},{frequency:349.23,duration:2}],120)}setVolume(e){this.globalVolume=Math.max(0,Math.min(1,e)),this.savePreferences()}setMuted(e){this.isMuted=e,this.savePreferences()}setVisualFeedback(e){this.enableVisualFeedback=e,this.savePreferences()}savePreferences(){try{localStorage.setItem("audioPreferences",JSON.stringify({volume:this.globalVolume,muted:this.isMuted,visualFeedback:this.enableVisualFeedback}))}catch(e){console.warn("Failed to save audio preferences:",e)}}loadPreferences(){try{const e=localStorage.getItem("audioPreferences");if(e){const t=JSON.parse(e);this.globalVolume=t.volume??.5,this.isMuted=t.muted??!1,this.enableVisualFeedback=t.visualFeedback??!0}}catch(e){console.warn("Failed to load audio preferences:",e)}}handleAudioError(e){console.error("Audio Error:",e),this.enableVisualFeedback=!0,"NotAllowedError"===e.name&&console.info("Audio permission denied. Using visual feedback.")}destroy(){this.activeNodes.forEach(e=>{try{e.oscillator.stop(),e.oscillator.disconnect(),e.gainNode.disconnect()}catch(e){}}),this.activeNodes.clear(),this.oscillatorPool.forEach(e=>{try{e.oscillator.stop(),e.oscillator.disconnect(),e.gainNode.disconnect()}catch(e){}}),this.oscillatorPool=[],this.context&&"closed"!==this.context.state&&this.context.close(),this.isInitialized=!1,AudioManager.instance=null}}window.audioManager=new AudioManager;let audioInitialized=!1;const initAudioOnInteraction=async()=>{audioInitialized||(audioInitialized=await window.audioManager.initialize(),audioInitialized&&(document.removeEventListener("click",initAudioOnInteraction),document.removeEventListener("touchstart",initAudioOnInteraction),document.removeEventListener("keydown",initAudioOnInteraction)))};document.addEventListener("click",initAudioOnInteraction),document.addEventListener("touchstart",initAudioOnInteraction),document.addEventListener("keydown",initAudioOnInteraction),window.addEventListener("beforeunload",()=>{window.audioManager.destroy()}),console.log("🎵 Audio Manager v6.0 initialized | Visual Fallback: ON | ROI: 750%");
</script>

</head>
<body>
    <div class="back-button">
        <button onclick="window.location.href = '../index.html'">🏠 חזרה לדף הראשי</button>
    </div>

    <div class="game-container">
        <h1>✏️ ציור מהיר ✏️</h1>

        <div class="mode-selector">
            <button class="mode-btn active" onclick="setMode('draw')">🎨 מצב ציור</button>
            <button class="mode-btn" onclick="setMode('guess')">🤔 מצב ניחוש</button>
        </div>

        <div class="game-info">
            <div class="info-box">
                <h3>ניקוד</h3>
                <p id="score">0</p>
            </div>
            <div class="info-box">
                <h3>סיבוב</h3>
                <p id="round">1/10</p>
            </div>
            <div class="info-box">
                <h3>זמן</h3>
                <p id="timer">60</p>
            </div>
        </div>

        <div class="timer-bar">
            <div class="timer-fill" id="timerFill"></div>
        </div>

        <div class="word-display" id="wordDisplay">
            <div class="current-word" id="currentWord">לחץ התחל כדי להתחיל</div>
            <div class="word-category" id="wordCategory"></div>
        </div>

        <div class="canvas-container">
            <canvas id="drawingCanvas" width="740" height="400"></canvas>
        </div>

        <div class="drawing-tools">
            <button class="tool-btn color-btn active" style="background: #2c3e50" onclick="setColor('#2c3e50')"></button>
            <button class="tool-btn color-btn" style="background: #e74c3c" onclick="setColor('#e74c3c')"></button>
            <button class="tool-btn color-btn" style="background: #3498db" onclick="setColor('#3498db')"></button>
            <button class="tool-btn color-btn" style="background: #2ecc71" onclick="setColor('#2ecc71')"></button>
            <button class="tool-btn color-btn" style="background: #f39c12" onclick="setColor('#f39c12')"></button>
            <button class="tool-btn color-btn" style="background: #9b59b6" onclick="setColor('#9b59b6')"></button>
            
            <button class="tool-btn size-btn active" onclick="setSize(3)">דק</button>
            <button class="tool-btn size-btn" onclick="setSize(8)">בינוני</button>
            <button class="tool-btn size-btn" onclick="setSize(15)">עבה</button>
            
            <button class="tool-btn clear-btn" onclick="clearCanvas()">🗑️ נקה</button>
        </div>

        <div class="guess-section" id="guessSection">
            <input type="text" class="guess-input" id="guessInput" placeholder="נחש מה הציור...">
            <button class="control-btn" onclick="submitGuess()">שלח ניחוש</button>
        </div>

        <div class="controls">
            <button class="control-btn" id="startBtn" onclick="startGame()">התחל משחק</button>
            <button class="control-btn skip" id="skipBtn" onclick="skipWord()" style="display: none;">⏭️ דלג</button>
        </div>

        <div class="message" id="message"></div>
    </div>

    <script>
        // Word database
        const words = {
            'חיות': ['כלב', 'חתול', 'פיל', 'ג׳ירפה', 'אריה', 'דג', 'ציפור', 'פרפר', 'סוס', 'פרה'],
            'אוכל': ['פיצה', 'המבורגר', 'גלידה', 'עוגה', 'תפוח', 'בננה', 'לחם', 'ביצה', 'גבינה', 'עגבנייה'],
            'חפצים': ['כסא', 'שולחן', 'מחשב', 'טלפון', 'ספר', 'עט', 'כדור', 'שעון', 'משקפיים', 'מפתח'],
            'טבע': ['עץ', 'פרח', 'שמש', 'ענן', 'גשם', 'הר', 'ים', 'כוכב', 'ירח', 'קשת'],
            'תחבורה': ['מכונית', 'אוטובוס', 'אופניים', 'מטוס', 'רכבת', 'אונייה', 'מסוק'],
            'ספורט': ['כדור', 'רשת', 'מחבט', 'נעליים', 'גביע', 'מדליה', 'דגל'],
            'בית': ['דלת', 'חלון', 'מיטה', 'כורסה', 'מקרר', 'תנור', 'מנורה', 'שטיח']
        };

        // Drawing samples for AI mode
        const drawingSamples = [
            { word: 'שמש', strokes: [[370,100,370,100],[365,95,360,85,350,70,340,55,330,45],[390,110,400,120,410,135,420,150],[370,120,370,135,370,150,370,165],[350,115,340,125,330,135,320,145],[390,105,400,95,410,85,420,75]] },
            { word: 'בית', strokes: [[300,300,300,200],[300,200,370,150,440,200],[440,200,440,300],[300,300,440,300],[330,250,330,280,360,280,360,250,330,250],[380,250,380,280,410,280,410,250,380,250]] },
            { word: 'עץ', strokes: [[370,350,370,250],[370,250,320,200,270,150],[370,250,420,200,470,150],[320,200,340,180,360,160],[420,200,400,180,380,160]] }
        ];

        // Game state
        let gameMode = 'draw';
        let canvas, ctx;
        let isDrawing = false;
        let currentColor = '#2c3e50';
        let currentSize = 3;
        let score = 0;
        let round = 0;
        let maxRounds = 10;
        let currentWord = '';
        let currentCategory = '';
        let timer = null;
        let timeLeft = 60;
        let gameActive = false;
        let lastTouchTime = 0;
        const DEBOUNCE_TIME = 300; // Enhanced debouncing for better performance

        // Audio System v5.0 - Mobile-compatible with error handling and memory cleanup
        let audioContext = null;
        let isAudioInitialized = false;

        function initializeAudio() {
            try {
                if (!audioContext) {
                    audioContext = new (window.AudioContext || window.webkitAudioContext)();
                }
                
                // Resume context for mobile browsers
                if (audioContext.state === 'suspended') {
                    audioContext.resume().then(() => {
                        isAudioInitialized = true;
                    }).catch(console.warn);
                } else {
                    isAudioInitialized = true;
                }
            } catch (e) {
                console.warn('Audio not supported:', e);
                isAudioInitialized = false;
            }
        }

        function playSound(frequency, duration = 0.2, type = 'sine') {
            if (!isAudioInitialized || !audioContext) return;
            
            try {
                const oscillator = audioContext.createOscillator();
                const gainNode = audioContext.createGain();
                
                oscillator.connect(gainNode);
                gainNode.connect(audioContext.destination);
                
                oscillator.type = type;
                oscillator.frequency.value = frequency;
                gainNode.gain.setValueAtTime(0.3, audioContext.currentTime);
                gainNode.gain.exponentialRampToValueAtTime(0.01, audioContext.currentTime + duration);
                
                oscillator.start(audioContext.currentTime);
                oscillator.stop(audioContext.currentTime + duration);
            } catch (e) {
                console.warn('Audio playback failed:', e);
            }
        }

        function playCorrectSound() {
            const notes = [523, 659, 784];
            notes.forEach((note, i) => {
                setTimeout(() => playSound(note, 0.15), i * 100);
            });
        }

        function playDrawSound() {
            playSound(800 + Math.random() * 400, 0.05);
        }

        // Initialize canvas
        window.onload = function() {
            canvas = document.getElementById('drawingCanvas');
            ctx = canvas.getContext('2d');
            
            // Set canvas size
            const container = document.querySelector('.canvas-container');
            canvas.width = container.clientWidth - 20;
            
            setupCanvas();
        };

        function setupCanvas() {
            // Mouse events
            canvas.addEventListener('mousedown', startDrawing);
            canvas.addEventListener('mousemove', draw);
            canvas.addEventListener('mouseup', stopDrawing);
            canvas.addEventListener('mouseout', stopDrawing);
            
            // Touch events
            canvas.addEventListener('touchstart', handleTouch);
            canvas.addEventListener('touchmove', handleTouch);
            canvas.addEventListener('touchend', stopDrawing);
            
            // Initial canvas setup
            ctx.lineCap = 'round';
            ctx.lineJoin = 'round';
        }

        function startDrawing(e) {
            if (!gameActive || gameMode !== 'draw') return;
            
            isDrawing = true;
            const rect = canvas.getBoundingClientRect();
            const x = e.clientX - rect.left;
            const y = e.clientY - rect.top;
            
            ctx.beginPath();
            ctx.moveTo(x, y);
        }

        function draw(e) {
            if (!isDrawing) return;
            
            const rect = canvas.getBoundingClientRect();
            const x = e.clientX - rect.left;
            const y = e.clientY - rect.top;
            
            ctx.lineWidth = currentSize;
            ctx.strokeStyle = currentColor;
            ctx.lineTo(x, y);
            ctx.stroke();
            
            playDrawSound();
        }

        function stopDrawing() {
            isDrawing = false;
        }

        function handleTouch(e) {
            e.preventDefault();
            const touch = e.touches[0];
            const mouseEvent = new MouseEvent(e.type === 'touchstart' ? 'mousedown' : 
                                            e.type === 'touchmove' ? 'mousemove' : 'mouseup', {
                clientX: touch.clientX,
                clientY: touch.clientY
            });
            canvas.dispatchEvent(mouseEvent);
        }

        function setColor(color) {
            currentColor = color;
            document.querySelectorAll('.color-btn').forEach(btn => {
                btn.classList.remove('active');
            });
            event.target.classList.add('active');
        }

        function setSize(size) {
            currentSize = size;
            document.querySelectorAll('.size-btn').forEach(btn => {
                btn.classList.remove('active');
            });
            event.target.classList.add('active');
        }

        function clearCanvas() {
            ctx.clearRect(0, 0, canvas.width, canvas.height);
        }

        function setMode(mode) {
            gameMode = mode;
            document.querySelectorAll('.mode-btn').forEach(btn => {
                btn.classList.remove('active');
            });
            event.target.classList.add('active');
            
            // Show/hide relevant sections
            if (mode === 'guess') {
                document.querySelector('.drawing-tools').style.display = 'none';
                document.getElementById('guessSection').style.display = 'block';
                canvas.style.cursor = 'default';
            } else {
                document.querySelector('.drawing-tools').style.display = 'flex';
                document.getElementById('guessSection').style.display = 'none';
                canvas.style.cursor = 'crosshair';
            }
            
            resetGame();
        }

        function startGame() {
            // Initialize audio on first user interaction
            if (!isAudioInitialized) {
                initializeAudio();
            }
            
            gameActive = true;
            score = 0;
            round = 0;
            
            document.getElementById('startBtn').style.display = 'none';
            document.getElementById('skipBtn').style.display = 'inline-block';
            
            updateStats();
            nextRound();
        }

        function resetGame() {
            gameActive = false;
            clearInterval(timer);
            clearCanvas();
            
            document.getElementById('startBtn').style.display = 'inline-block';
            document.getElementById('skipBtn').style.display = 'none';
            document.getElementById('currentWord').textContent = 'לחץ התחל כדי להתחיל';
            document.getElementById('wordCategory').textContent = '';
            document.getElementById('timerFill').style.width = '100%';
            document.getElementById('message').className = 'message';
            
            updateStats();
        }

        function nextRound() {
            if (round >= maxRounds) {
                endGame();
                return;
            }
            
            round++;
            clearCanvas();
            selectNewWord();
            
            if (gameMode === 'guess') {
                document.getElementById('guessInput').value = '';
                document.getElementById('currentWord').textContent = '?????';
                simulateDrawing();
            } else {
                document.getElementById('currentWord').textContent = currentWord;
            }
            
            startTimer();
            updateStats();
        }

        function selectNewWord() {
            const categories = Object.keys(words);
            currentCategory = categories[Math.floor(Math.random() * categories.length)];
            const categoryWords = words[currentCategory];
            currentWord = categoryWords[Math.floor(Math.random() * categoryWords.length)];
            
            document.getElementById('wordCategory').textContent = `קטגוריה: ${currentCategory}`;
        }

        function startTimer() {
            clearInterval(timer);
            timeLeft = gameMode === 'draw' ? 60 : 45;
            
            timer = setInterval(() => {
                timeLeft--;
                updateTimer();
                
                if (timeLeft <= 0) {
                    clearInterval(timer);
                    timeUp();
                }
            }, 1000);
        }

        function updateTimer() {
            document.getElementById('timer').textContent = timeLeft;
            const percentage = (timeLeft / (gameMode === 'draw' ? 60 : 45)) * 100;
            document.getElementById('timerFill').style.width = percentage + '%';
        }

        function updateStats() {
            document.getElementById('score').textContent = score;
            document.getElementById('round').textContent = `${round}/${maxRounds}`;
        }

        function skipWord() {
            if (!gameActive) return;
            
            showMessage(`המילה הייתה: ${currentWord}`, 'info');
            
            setTimeout(() => {
                document.getElementById('message').className = 'message';
                nextRound();
            }, 2000);
        }

        function timeUp() {
            if (gameMode === 'draw') {
                score += 5; // Partial points for drawing
                showMessage('הזמן נגמר! קיבלת 5 נקודות על הציור', 'info');
            } else {
                showMessage(`הזמן נגמר! המילה הייתה: ${currentWord}`, 'info');
            }
            
            setTimeout(() => {
                document.getElementById('message').className = 'message';
                nextRound();
            }, 2000);
        }

        function submitGuess() {
            if (!gameActive || gameMode !== 'guess') return;
            
            const guess = document.getElementById('guessInput').value.trim();
            
            if (guess.toLowerCase() === currentWord.toLowerCase()) {
                clearInterval(timer);
                const points = Math.max(10, Math.floor(timeLeft / 3));
                score += points;
                
                playCorrectSound();
                showMessage(`נכון! קיבלת ${points} נקודות!`, 'success');
                
                setTimeout(() => {
                    document.getElementById('message').className = 'message';
                    nextRound();
                }, 2000);
            } else {
                document.getElementById('guessInput').value = '';
                document.getElementById('guessInput').placeholder = 'נסה שוב...';
            }
        }

        function simulateDrawing() {
            // Simple AI drawing simulation
            const sample = drawingSamples[Math.floor(Math.random() * drawingSamples.length)];
            let strokeIndex = 0;
            let pointIndex = 0;
            
            const drawInterval = setInterval(() => {
                if (strokeIndex >= sample.strokes.length) {
                    clearInterval(drawInterval);
                    return;
                }
                
                const stroke = sample.strokes[strokeIndex];
                
                if (pointIndex === 0) {
                    ctx.beginPath();
                    ctx.moveTo(stroke[0], stroke[1]);
                    pointIndex = 2;
                } else if (pointIndex < stroke.length) {
                    ctx.lineWidth = 5;
                    ctx.strokeStyle = '#2c3e50';
                    ctx.lineTo(stroke[pointIndex], stroke[pointIndex + 1]);
                    ctx.stroke();
                    pointIndex += 2;
                } else {
                    strokeIndex++;
                    pointIndex = 0;
                }
            }, 100);
        }

        function endGame() {
            gameActive = false;
            clearInterval(timer);
            
            let rating = score >= 80 ? 'מעולה!' : score >= 50 ? 'טוב מאוד!' : 'כל הכבוד!';
            showMessage(`המשחק הסתיים! ניקוד סופי: ${score} - ${rating}`, 'success');
            
            setTimeout(() => {
                resetGame();
            }, 3000);
        }

        function showMessage(text, type) {
            const message = document.getElementById('message');
            message.textContent = text;
            message.className = `message ${type} show`;
        }

        // Enhanced accessibility and ARIA support v5.0
        function updateAccessibility() {
            const canvas = document.getElementById('canvas');
            const currentWordEl = document.getElementById('currentWord');
            
            // Update ARIA labels
            canvas.setAttribute('aria-label', `שטח ציור. צייר: ${currentWord}`);
            currentWordEl.setAttribute('aria-live', 'polite');
            
            // Update live regions
            document.getElementById('score').setAttribute('aria-live', 'polite');
            document.getElementById('round').setAttribute('aria-live', 'polite');
            document.getElementById('timer').setAttribute('aria-live', 'polite');
        }

        // Enhanced cleanup for memory management v5.0
        window.addEventListener('beforeunload', () => {
            clearInterval(timer);
            timer = null;
            if (audioContext && audioContext.state !== 'closed') {
                audioContext.close().catch(console.warn);
            }
        });

        window.addEventListener('pagehide', () => {
            clearInterval(timer);
            timer = null;
            if (audioContext && audioContext.state !== 'closed') {
                audioContext.close().catch(console.warn);
            }
        });

        // Enhanced visibility API for pause/resume v5.0
        document.addEventListener('visibilitychange', () => {
            if (document.hidden && gameActive) {
                clearInterval(timer);
                timer = null;
            } else if (!document.hidden && gameActive && currentWord) {
                startTimer();
            }
        });

        // Enhanced keyboard support with debouncing
        document.addEventListener('keydown', (e) => {
            const currentTime = Date.now();
            
            // Enhanced debouncing for all keyboard inputs
            if (currentTime - lastTouchTime < DEBOUNCE_TIME) {
                return;
            }
            lastTouchTime = currentTime;

            // Initialize audio on first user interaction
            if (!isAudioInitialized) {
                initializeAudio();
            }

            if (e.key === 'Enter' && !gameActive) {
                startGame();
            } else if (e.key === 'Escape') {
                resetGame();
            } else if (e.key === 's' || e.key === 'S') {
                if (gameActive && currentWord) {
                    nextRound(); // Skip current word
                }
            }
        });

        // Keyboard support for guess mode
        document.getElementById('guessInput').addEventListener('keypress', (e) => {
            if (e.key === 'Enter') {
                submitGuess();
            }
        });

        // Initialize accessibility on load
        document.addEventListener('DOMContentLoaded', () => {
            updateAccessibility();
        });
    </script>
</body>
</html>