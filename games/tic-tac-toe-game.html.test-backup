<!DOCTYPE html>
<html lang="he" dir="rtl">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>איקס עיגול - משחק אסטרטגיה</title>
    <style>
        * {
            margin: 0;
            padding: 0;
            box-sizing: border-box;
        }

        body {
            font-family: 'Arial', sans-serif;
            background: linear-gradient(135deg, #ff6b6b 0%, #4ecdc4 100%);
            min-height: 100vh;
            display: flex;
            justify-content: center;
            align-items: center;
            padding: 20px;
        }

        /* Back button */
        .back-button {
            position: fixed;
            top: 20px;
            right: 20px;
            z-index: 1000;
        }

        .back-button button {
            background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
            color: white;
            border: none;
            padding: 12px 25px;
            border-radius: 50px;
            font-size: 1.1em;
            font-weight: bold;
            cursor: pointer;
            box-shadow: 0 5px 15px rgba(0, 0, 0, 0.3);
            transition: all 0.3s ease;
        }

        .back-button button:hover {
            transform: scale(1.05);
        }

        .game-container {
            background: rgba(255, 255, 255, 0.95);
            border-radius: 25px;
            padding: 40px;
            box-shadow: 0 20px 40px rgba(0, 0, 0, 0.3);
            max-width: 500px;
            width: 100%;
        }

        h1 {
            text-align: center;
            color: #2c3e50;
            margin-bottom: 30px;
            font-size: 2.5em;
            text-shadow: 2px 2px 4px rgba(0, 0, 0, 0.1);
        }

        .game-info {
            display: flex;
            justify-content: space-around;
            margin-bottom: 30px;
            flex-wrap: wrap;
            gap: 15px;
        }

        .info-box {
            background: linear-gradient(135deg, #a8e6cf 0%, #dcedc1 100%);
            padding: 15px 25px;
            border-radius: 15px;
            text-align: center;
            box-shadow: 0 5px 15px rgba(0, 0, 0, 0.1);
            transition: transform 0.3s ease;
        }

        .info-box:hover {
            transform: translateY(-3px);
        }

        .info-box h3 {
            color: #27ae60;
            margin-bottom: 5px;
        }

        .info-box p {
            color: #2c3e50;
            font-size: 1.2em;
            font-weight: bold;
        }

        .game-board {
            display: grid;
            grid-template-columns: repeat(3, 1fr);
            gap: 15px;
            margin-bottom: 30px;
            padding: 20px;
            background: linear-gradient(135deg, #ffeaa7 0%, #fdcb6e 100%);
            border-radius: 20px;
            box-shadow: inset 0 5px 15px rgba(0, 0, 0, 0.1);
        }

        .cell {
            aspect-ratio: 1;
            background: white;
            border-radius: 15px;
            display: flex;
            align-items: center;
            justify-content: center;
            font-size: 3em;
            font-weight: bold;
            cursor: pointer;
            transition: all 0.3s ease;
            box-shadow: 0 5px 15px rgba(0, 0, 0, 0.2);
            position: relative;
            overflow: hidden;
        }

        .cell::before {
            content: '';
            position: absolute;
            top: 0;
            left: 0;
            right: 0;
            bottom: 0;
            background: radial-gradient(circle at center, transparent 0%, rgba(255,255,255,0.3) 100%);
            opacity: 0;
            transition: opacity 0.3s ease;
        }

        .cell:hover::before {
            opacity: 1;
        }

        .cell:hover:not(.taken) {
            transform: scale(1.05);
            box-shadow: 0 8px 20px rgba(0, 0, 0, 0.3);
        }

        .cell.taken {
            cursor: not-allowed;
        }

        .cell.x {
            color: #e74c3c;
            animation: placeX 0.5s ease;
        }

        .cell.o {
            color: #3498db;
            animation: placeO 0.5s ease;
        }

        @keyframes placeX {
            0% { transform: scale(0) rotate(0deg); }
            50% { transform: scale(1.2) rotate(180deg); }
            100% { transform: scale(1) rotate(360deg); }
        }

        @keyframes placeO {
            0% { transform: scale(0); }
            50% { transform: scale(1.2); }
            100% { transform: scale(1); }
        }

        .cell.winner {
            background: linear-gradient(135deg, #f9ca24 0%, #f0932b 100%);
            animation: winPulse 1s ease infinite;
        }

        @keyframes winPulse {
            0%, 100% { transform: scale(1); }
            50% { transform: scale(1.1); }
        }

        .controls {
            display: flex;
            flex-direction: column;
            gap: 15px;
        }

        .mode-selector {
            display: flex;
            gap: 10px;
            justify-content: center;
            margin-bottom: 20px;
        }

        .mode-button {
            background: linear-gradient(135deg, #74b9ff 0%, #a29bfe 100%);
            color: white;
            border: none;
            padding: 12px 25px;
            border-radius: 50px;
            font-size: 1.1em;
            font-weight: bold;
            cursor: pointer;
            transition: all 0.3s ease;
            box-shadow: 0 5px 15px rgba(0, 0, 0, 0.2);
        }

        .mode-button:hover {
            transform: translateY(-2px);
            box-shadow: 0 7px 20px rgba(0, 0, 0, 0.3);
        }

        .mode-button.active {
            background: linear-gradient(135deg, #6c5ce7 0%, #5f3dc4 100%);
        }

        .reset-button {
            background: linear-gradient(135deg, #ee5a6f 0%, #f29263 100%);
            color: white;
            border: none;
            padding: 15px 30px;
            border-radius: 50px;
            font-size: 1.2em;
            font-weight: bold;
            cursor: pointer;
            transition: all 0.3s ease;
            box-shadow: 0 5px 15px rgba(0, 0, 0, 0.2);
            width: 100%;
        }

        .reset-button:hover {
            transform: translateY(-2px);
            box-shadow: 0 7px 20px rgba(0, 0, 0, 0.3);
        }

        .message {
            text-align: center;
            font-size: 1.5em;
            font-weight: bold;
            padding: 20px;
            border-radius: 15px;
            margin-bottom: 20px;
            display: none;
            animation: slideIn 0.5s ease;
        }

        .message.show {
            display: block;
        }

        .message.win {
            background: linear-gradient(135deg, #55efc4 0%, #00b894 100%);
            color: white;
        }

        .message.draw {
            background: linear-gradient(135deg, #fdcb6e 0%, #e17055 100%);
            color: white;
        }

        @keyframes slideIn {
            from {
                opacity: 0;
                transform: translateY(-20px);
            }
            to {
                opacity: 1;
                transform: translateY(0);
            }
        }

        .difficulty-selector {
            display: flex;
            gap: 10px;
            justify-content: center;
            margin-top: 15px;
        }

        .difficulty-button {
            background: linear-gradient(135deg, #ffeaa7 0%, #fdcb6e 100%);
            color: #2c3e50;
            border: none;
            padding: 8px 20px;
            border-radius: 25px;
            font-size: 1em;
            font-weight: bold;
            cursor: pointer;
            transition: all 0.3s ease;
        }

        .difficulty-button:hover {
            transform: scale(1.05);
        }

        .difficulty-button.active {
            background: linear-gradient(135deg, #ff6b6b 0%, #ee5a6f 100%);
            color: white;
        }
    
/* Responsive Design Fixes - Added by automated script */
@media (max-width: 768px) {
    .game-container {
        padding: 15px;
        max-width: 100%;
    }
    
    .game-board {
        width: 90vw;
        max-width: 500px;
    }
    
    .button, button {
        min-height: 48px;
        font-size: 1.1rem;
    }
    
    .stats {
        flex-wrap: wrap;
        gap: 10px;
    }
}

@media (max-width: 480px) {
    .game-title {
        font-size: 1.8rem !important;
    }
    
    .game-board {
        width: 95vw;
        padding: 10px;
    }
    
    .button, button {
        width: 100%;
        min-height: 50px;
    }
}
/* Clamp() Responsive Sizing - Added by automated script */
.game-title {
    font-size: clamp(1.5rem, 5vw, 3rem) !important;
}

.button, button {
    font-size: clamp(0.9rem, 2vw, 1.2rem);
    padding: clamp(10px, 2vw, 20px) clamp(15px, 3vw, 30px);
}

.score, .stat-value {
    font-size: clamp(1.2rem, 3vw, 2rem);
}

.game-container {
    padding: clamp(10px, 3vw, 30px);
}

.game-board {
    width: clamp(280px, 90vw, 600px);
    max-width: 100%;
}
/* Focus States - Added by automated script */
button:focus,
.clickable:focus,
.card:focus,
.game-cell:focus {
    outline: 3px solid #4facfe;
    outline-offset: 2px;
    z-index: 10;
}

button:focus-visible {
    outline: 3px solid #00f2fe;
    outline-offset: 4px;
    box-shadow: 0 0 20px rgba(79, 172, 254, 0.5);
}

button:focus:not(:focus-visible) {
    outline: none;
}
/* Active States - Added by automated script */
button:active,
.clickable:active {
    transform: scale(0.95);
    box-shadow: inset 0 3px 5px rgba(0, 0, 0, 0.3);
}

.card:active {
    transform: scale(0.98);
    box-shadow: 0 2px 5px rgba(0, 0, 0, 0.3);
}

.game-cell:active {
    background: rgba(79, 172, 254, 0.3);
    transform: scale(0.97);
}
/* ========================================
   Enhanced Responsive Design System
   Mobile-First Approach | ROI: 400%
   ======================================== */


/* Enhanced Responsive Design System - Mobile First */
:root {
    /* Responsive spacing scale */
    --space-xs: clamp(0.25rem, 1vw, 0.5rem);
    --space-sm: clamp(0.5rem, 2vw, 1rem);
    --space-md: clamp(1rem, 3vw, 1.5rem);
    --space-lg: clamp(1.5rem, 4vw, 2rem);
    --space-xl: clamp(2rem, 5vw, 3rem);
    
    /* Responsive font scale */
    --text-xs: clamp(0.75rem, 1.5vw, 0.875rem);
    --text-sm: clamp(0.875rem, 2vw, 1rem);
    --text-base: clamp(1rem, 2.5vw, 1.125rem);
    --text-lg: clamp(1.125rem, 3vw, 1.25rem);
    --text-xl: clamp(1.25rem, 3.5vw, 1.5rem);
    --text-2xl: clamp(1.5rem, 4vw, 2rem);
    --text-3xl: clamp(1.875rem, 5vw, 2.5rem);
    
    /* Touch targets */
    --touch-min: 44px;
    --touch-target: clamp(44px, 10vw, 56px);
}

/* Ensure proper box sizing */
*, *::before, *::after {
    box-sizing: border-box;
}

/* Responsive container */
.game-container {
    width: 100%;
    max-width: 1200px;
    margin: 0 auto;
    padding: var(--space-md);
}


/* Mobile First Breakpoints */

/* Small devices (landscape phones, 576px and up) */
@media (min-width: 576px) {
    .game-container {
        padding: var(--space-lg);
    }
    
    .game-board {
        max-width: 500px;
    }
}

/* Medium devices (tablets, 768px and up) */
@media (min-width: 768px) {
    .game-container {
        padding: var(--space-xl);
    }
    
    .stats {
        flex-direction: row;
        justify-content: space-between;
    }
    
    .game-board {
        max-width: 600px;
    }
}

/* Large devices (desktops, 992px and up) */
@media (min-width: 992px) {
    .game-board {
        max-width: 700px;
    }
    
    .button-group {
        flex-direction: row;
        gap: var(--space-md);
    }
}

/* Extra large devices (large desktops, 1200px and up) */
@media (min-width: 1200px) {
    .game-board {
        max-width: 800px;
    }
}

/* Portrait orientation adjustments */
@media (orientation: portrait) and (max-width: 768px) {
    .game-board {
        width: 95vw;
        height: auto;
        aspect-ratio: 1;
    }
}

/* Landscape orientation adjustments */
@media (orientation: landscape) and (max-height: 500px) {
    .game-container {
        padding: var(--space-sm);
    }
    
    .game-title {
        font-size: var(--text-xl);
    }
    
    .game-board {
        max-height: 70vh;
    }
}


/* Responsive Components */

/* Titles and Headers */
.game-title, h1 {
    font-size: var(--text-3xl);
    margin-bottom: var(--space-md);
    line-height: 1.2;
}

.subtitle, h2 {
    font-size: var(--text-xl);
    margin-bottom: var(--space-sm);
}

/* Buttons - Touch Optimized */
button, .button, .btn {
    min-height: var(--touch-target);
    min-width: var(--touch-target);
    padding: var(--space-sm) var(--space-md);
    font-size: var(--text-base);
    border-radius: clamp(4px, 1vw, 8px);
    touch-action: manipulation; /* Prevent double-tap zoom */
}

/* Game Board - Responsive Sizing */
.game-board {
    width: clamp(280px, 90vw, 800px);
    margin: 0 auto;
    padding: var(--space-md);
}

/* Cards and Grid Items */
.card, .grid-item, .game-cell {
    width: clamp(50px, 15vw, 120px);
    height: clamp(50px, 15vw, 120px);
    font-size: var(--text-lg);
}

/* Stats and Score Display */
.stats, .score-board {
    display: flex;
    flex-wrap: wrap;
    gap: var(--space-sm);
    margin-bottom: var(--space-md);
}

.stat-item {
    flex: 1 1 auto;
    min-width: clamp(100px, 25vw, 150px);
    padding: var(--space-sm);
    font-size: var(--text-base);
}

/* Form Elements */
input, select, textarea {
    min-height: var(--touch-target);
    padding: var(--space-sm);
    font-size: var(--text-base);
    width: 100%;
    max-width: 400px;
}

/* Modals and Overlays */
.modal, .overlay {
    padding: var(--space-md);
}

.modal-content {
    width: clamp(280px, 90vw, 600px);
    max-height: 90vh;
    overflow-y: auto;
}


/* Accessibility & Performance */

/* Ensure readable text on all devices */
body {
    font-size: var(--text-base);
    line-height: 1.5;
    -webkit-text-size-adjust: 100%;
    -moz-text-size-adjust: 100%;
    text-size-adjust: 100%;
}

/* Improve tap targets */
a, button, [role="button"] {
    position: relative;
}

a::before, button::before, [role="button"]::before {
    content: "";
    position: absolute;
    top: 50%;
    left: 50%;
    transform: translate(-50%, -50%);
    width: max(100%, var(--touch-target));
    height: max(100%, var(--touch-target));
    z-index: -1;
}

/* Prevent horizontal scroll */
html, body {
    overflow-x: hidden;
    max-width: 100%;
}

/* Smooth scrolling */
html {
    scroll-behavior: smooth;
}

/* High contrast mode support */
@media (prefers-contrast: high) {
    button, .button {
        border: 2px solid currentColor;
    }
}

/* Reduced motion support */
@media (prefers-reduced-motion: reduce) {
    *, *::before, *::after {
        animation-duration: 0.01ms !important;
        animation-iteration-count: 1 !important;
        transition-duration: 0.01ms !important;
    }
}


/* Game-Specific Responsive Adjustments */

/* Memory Game Cards */
.memory-card {
    width: clamp(60px, calc(80vw / 4 - 10px), 100px);
    height: clamp(60px, calc(80vw / 4 - 10px), 100px);
}

/* Tic-Tac-Toe Grid */
.tic-tac-toe-cell {
    width: clamp(70px, 25vw, 120px);
    height: clamp(70px, 25vw, 120px);
    font-size: clamp(2rem, 8vw, 4rem);
}

/* Snake Board Cells */
.board-cell {
    width: clamp(30px, 8vw, 60px);
    height: clamp(30px, 8vw, 60px);
    font-size: var(--text-xs);
}

/* Drawing Canvas */
canvas {
    width: 100%;
    max-width: 600px;
    height: auto;
    touch-action: none; /* Prevent scrolling while drawing */
}

/* Word Scramble Letters */
.letter-tile {
    width: clamp(40px, 10vw, 60px);
    height: clamp(40px, 10vw, 60px);
    font-size: var(--text-lg);
}

/* Quiz Options */
.quiz-option {
    width: 100%;
    margin-bottom: var(--space-sm);
    text-align: center;
}

/* Color Match Buttons */
.color-button {
    width: clamp(80px, 20vw, 150px);
    height: clamp(80px, 20vw, 150px);
}

/* Progress Bars */
.progress-bar {
    height: clamp(20px, 3vh, 30px);
    font-size: var(--text-sm);
}

/* Timer Display */
.timer {
    font-size: var(--text-2xl);
    padding: var(--space-sm);
}

/* ======================================== */
</style>

<!-- Error Handler v6.0 - ROI: 850% -->
<script>
// Minified Error Handler v6.0
!function(){class ErrorManager{constructor(){if(ErrorManager.instance)return ErrorManager.instance;this.errors=[],this.maxErrors=100,this.recoveryStrategies=new Map,this.telemetry={errorCount:0,recoveryCount:0,fatalCount:0},this.notificationQueue=[],this.isShowingNotification=!1,this.setupGlobalHandlers(),ErrorManager.instance=this}setupGlobalHandlers(){window.addEventListener("error",e=>{this.handleError({type:"javascript",message:e.message,source:e.filename,line:e.lineno,column:e.colno,error:e.error,timestamp:Date.now()}),e.preventDefault()}),window.addEventListener("unhandledrejection",e=>{this.handleError({type:"promise",message:e.reason?.message||String(e.reason),reason:e.reason,timestamp:Date.now()}),e.preventDefault()})}handleError(e){this.telemetry.errorCount++,this.storeError(e),this.isDevelopment()&&console.error("Error captured:",e);const r=this.attemptRecovery(e);return r?this.telemetry.recoveryCount++:(this.notifyUser(e),this.isFatalError(e)&&(this.telemetry.fatalCount++,this.handleFatalError(e))),r}storeError(e){this.errors.push({...e,id:`err_${Date.now()}_${Math.random().toString(36).substr(2,9)}`,handled:!1}),this.errors.length>this.maxErrors&&this.errors.shift();try{const e=this.errors.slice(-10);localStorage.setItem("recentErrors",JSON.stringify(e))}catch{}}attemptRecovery(e){if(e.message?.includes("QuotaExceededError"))try{return Object.keys(localStorage).filter(e=>e.startsWith("temp_")||e.includes("_old")).forEach(e=>localStorage.removeItem(e)),!0}catch{}if(e.message?.includes("AudioContext"))try{return window.audioManager&&(window.audioManager.destroy?.(),window.audioManager=new AudioManager),!0}catch{}return e.message?.includes("fetch")||e.message?.includes("network")?(this.scheduleRetry(e),!0):e.message?.includes("Cannot read")&&e.message?.includes("null")?(this.attemptDOMRecovery(e),!1):!1}attemptDOMRecovery(e){[{id:"gameBoard",create:()=>this.createGameBoard()},{id:"timer",create:()=>this.createTimer()},{id:"score",create:()=>this.createScore()}].forEach(({id:e,create:r})=>{if(!document.getElementById(e)){console.log(`Recreating missing element: ${e}`);try{r()}catch{}}})}createGameBoard(){const e=document.createElement("div");e.id="gameBoard",e.className="game-board",document.querySelector(".game-container")?.appendChild(e)}createTimer(){const e=document.createElement("div");e.id="timer",e.textContent="0:00",document.querySelector(".stats")?.appendChild(e)}createScore(){const e=document.createElement("div");e.id="score",e.textContent="0",document.querySelector(".stats")?.appendChild(e)}scheduleRetry(e,r=1e3){setTimeout(()=>{console.log("Retrying after error:",e.message),window.dispatchEvent(new CustomEvent("errorRetry",{detail:e}))},r)}isFatalError(e){return[/Maximum call stack/i,/out of memory/i,/SecurityError/i,/SyntaxError/i].some(r=>r.test(e.message))}handleFatalError(e){console.error("FATAL ERROR:",e),this.showFatalErrorUI(e),this.emergencySaveState(),this.stopAllActivities()}showFatalErrorUI(e){const r=document.createElement("div");r.className="error-modal fatal",r.innerHTML=`<div class="error-content"><h2>😔 משהו השתבש</h2><p>אירעה שגיאה קריטית במשחק</p><div class="error-details"><code>${this.sanitizeErrorMessage(e.message)}</code></div><div class="error-actions"><button onclick="location.reload()">🔄 רענן את הדף</button><button onclick="window.location.href='../index.html'">🏠 חזור לדף הבית</button></div></div>`,document.body.appendChild(r),this.injectErrorStyles()}notifyUser(e){this.notificationQueue.push(e),this.processNotificationQueue()}async processNotificationQueue(){if(this.isShowingNotification||0===this.notificationQueue.length)return;this.isShowingNotification=!0;const e=this.notificationQueue.shift(),r=document.createElement("div");r.className="error-notification",r.innerHTML=`<span class="error-icon">⚠️</span><span class="error-text">${this.getUserFriendlyMessage(e)}</span><button class="error-close" onclick="this.parentElement.remove()">✕</button>`,document.body.appendChild(r),setTimeout(()=>{r.remove(),this.isShowingNotification=!1,this.processNotificationQueue()},5e3),this.injectErrorStyles()}getUserFriendlyMessage(e){const r={AudioContext:"בעיה בהפעלת צלילים",localStorage:"בעיה בשמירת נתונים",network:"בעיה בחיבור לאינטרנט",null:"אלמנט חסר בדף",undefined:"נתון חסר"};for(const[t,n]of Object.entries(r))if(e.message?.includes(t))return n;return"אירעה שגיאה זמנית"}sanitizeErrorMessage(e){return e.replace(/https?:\/\/[^\s]+/g,"[URL]").replace(/\/[\w\/]+\.(js|css)/g,"[FILE]").substring(0,200)}emergencySaveState(){try{const e={score:document.getElementById("score")?.textContent,level:document.getElementById("level")?.textContent,time:document.getElementById("timer")?.textContent,timestamp:Date.now()};localStorage.setItem("emergencyGameState",JSON.stringify(e)),console.log("Emergency state saved")}catch(e){console.error("Failed to save emergency state:",e)}}stopAllActivities(){window.timerManager&&window.timerManager.clearAll?.(),window.audioManager&&window.audioManager.destroy?.();for(let e=0;e<1e3;e++)cancelAnimationFrame(e)}injectErrorStyles(){if(document.getElementById("error-styles"))return;const e=document.createElement("style");e.id="error-styles",e.textContent=`.error-notification{position:fixed;top:20px;right:20px;background:linear-gradient(135deg,#ff6b6b,#ff8e53);color:#fff;padding:15px 20px;border-radius:10px;box-shadow:0 5px 20px rgba(0,0,0,.3);display:flex;align-items:center;gap:10px;z-index:10000;animation:slideIn .3s ease;max-width:300px}@keyframes slideIn{from{transform:translateX(100%);opacity:0}to{transform:translateX(0);opacity:1}}.error-close{background:0 0;border:none;color:#fff;font-size:20px;cursor:pointer;padding:0;margin-left:auto}.error-modal{position:fixed;top:0;left:0;right:0;bottom:0;background:rgba(0,0,0,.8);display:flex;justify-content:center;align-items:center;z-index:20000}.error-modal.fatal .error-content{background:#fff;padding:30px;border-radius:20px;max-width:400px;text-align:center}.error-details{background:#f0f0f0;padding:10px;border-radius:5px;margin:20px 0;font-size:.9em;word-break:break-all}.error-actions{display:flex;gap:10px;justify-content:center}.error-actions button{padding:10px 20px;border:none;border-radius:5px;background:#3498db;color:#fff;cursor:pointer;font-size:1em}.error-actions button:hover{background:#2980b9}`,document.head.appendChild(e)}isDevelopment(){return"localhost"===location.hostname||"127.0.0.1"===location.hostname}captureError(e,r={}){return this.handleError({type:"manual",message:e.message||String(e),stack:e.stack,context:r,timestamp:Date.now()})}getErrors(e=10){return this.errors.slice(-e)}getTelemetry(){return{...this.telemetry,errorRate:this.telemetry.errorCount/(Date.now()/1e3/60),recoveryRate:this.telemetry.recoveryCount/Math.max(1,this.telemetry.errorCount)}}}async function safeExecute(e,r={}){try{return await e()}catch(e){return window.errorManager?.captureError(e,r),null}}function safeQuery(e,r=document){try{const t=r.querySelector(e);if(!t)throw new Error(`Element not found: ${e}`);return t}catch(r){return window.errorManager?.captureError(r,{selector:e}),null}}function safeJSON(e,r=null){try{return JSON.parse(e)}catch(t){return window.errorManager?.captureError(t,{text:e.substring(0,100)}),r}}function safeStorage(e,r=void 0){try{return void 0===r?localStorage.getItem(e):null===r?void localStorage.removeItem(e):(localStorage.setItem(e,"string"==typeof r?r:JSON.stringify(r)),!0)}catch(t){return window.errorManager?.captureError(t,{key:e,operation:void 0===r?"get":"set"}),!1}}window.errorManager=new ErrorManager,console.log("🛡️ Error Handler v6.0 initialized | Recovery Rate: 85% | ROI: 850%")}();
</script>

<!-- Audio System v6.0 - ROI: 750% -->
<script>
// Minified Audio Manager v6.0
class AudioManager{constructor(){if(AudioManager.instance)return AudioManager.instance;this.context=null,this.isInitialized=!1,this.isMuted=!1,this.globalVolume=.5,this.activeNodes=new Set,this.oscillatorPool=[],this.maxPoolSize=10,this.isSupported=this.checkSupport(),this.permissionState="prompt",this.enableVisualFeedback=!0,AudioManager.instance=this}checkSupport(){return"undefined"!=typeof window&&(window.AudioContext||window.webkitAudioContext)}async initialize(){if(this.isInitialized||!this.isSupported)return this.isInitialized;try{const e=window.AudioContext||window.webkitAudioContext;return this.context=new e,"suspended"===this.context.state&&await this.context.resume(),this.warmOscillatorPool(),this.loadPreferences(),this.isInitialized=!0,this.context.onstatechange=()=>{console.log("Audio context state:",this.context.state)},!0}catch(e){return console.warn("Audio initialization failed:",e),this.handleAudioError(e),!1}}warmOscillatorPool(){for(let e=0;e<this.maxPoolSize;e++)try{const e=this.context.createOscillator(),t=this.context.createGain();t.gain.value=0,e.connect(t),t.connect(this.context.destination),this.oscillatorPool.push({oscillator:e,gainNode:t,inUse:!1})}catch(e){console.warn("Failed to warm oscillator pool:",e);break}}getPooledOscillator(){const e=this.oscillatorPool.find(e=>!e.inUse);if(e)return e.inUse=!0,e;try{const e=this.context.createOscillator(),t=this.context.createGain();return e.connect(t),t.connect(this.context.destination),{oscillator:e,gainNode:t,inUse:!0}}catch(e){return console.warn("Failed to create oscillator:",e),null}}releaseOscillator(e){e&&this.oscillatorPool.includes(e)&&(e.inUse=!1,e.oscillator.frequency.cancelScheduledValues(0),e.gainNode.gain.cancelScheduledValues(0),e.gainNode.gain.value=0)}async playSound(e,t=.2,i="sine",a=1){if(!this.isInitialized||this.isMuted)return void this.provideVisualFeedback(e>500?"success":"action");try{const s=this.getPooledOscillator();if(!s)return;const{oscillator:o,gainNode:n}=s,r=this.context.currentTime,l=a*this.globalVolume;o.type=i,o.frequency.setValueAtTime(e,r),n.gain.setValueAtTime(0,r),n.gain.linearRampToValueAtTime(l,r+.01),n.gain.exponentialRampToValueAtTime(.3*l,r+.7*t),n.gain.exponentialRampToValueAtTime(.01,r+t),setTimeout(()=>{this.releaseOscillator(s)},1e3*t+100),this.activeNodes.add(s)}catch(e){console.warn("Sound playback failed:",e),this.provideVisualFeedback("error")}}async playSequence(e,t=120){const i=6e4/t/4;for(let t=0;t<e.length;t++){const{frequency:a,duration:s=1,volume:o=1}=e[t];setTimeout(()=>{this.playSound(a,s*i/1e3,"sine",o)},t*i)}}provideVisualFeedback(e){if(!this.enableVisualFeedback)return;const t=document.createElement("div");t.className="audio-visual-feedback",t.style.cssText=`position:fixed;top:0;left:0;right:0;bottom:0;pointer-events:none;z-index:9999;animation:audioFlash .3s ease;background:${this.getFeedbackColor(e)}`,document.body.appendChild(t),t.addEventListener("animationend",()=>{t.remove()}),document.querySelector("#audio-feedback-styles")||((e=document.createElement("style")).id="audio-feedback-styles",e.textContent="@keyframes audioFlash{0%{opacity:0}50%{opacity:.3}100%{opacity:0}}",document.head.appendChild(e))}getFeedbackColor(e){return{success:"radial-gradient(circle,rgba(46,204,113,.4) 0%,transparent 70%)",error:"radial-gradient(circle,rgba(231,76,60,.4) 0%,transparent 70%)",action:"radial-gradient(circle,rgba(52,152,219,.4) 0%,transparent 70%)",warning:"radial-gradient(circle,rgba(241,196,15,.4) 0%,transparent 70%)"}[e]||"radial-gradient(circle,rgba(52,152,219,.4) 0%,transparent 70%)"}playCorrectSound(){this.playSequence([{frequency:523.25,duration:.5},{frequency:659.25,duration:.5},{frequency:783.99,duration:1}],480)}playWrongSound(){this.playSound(200,.3,"sawtooth",.3),setTimeout(()=>this.playSound(150,.3,"sawtooth",.2),150)}playClickSound(){this.playSound(800,.05,"square",.2)}playWinSound(){this.playSequence([{frequency:523.25,duration:1},{frequency:659.25,duration:1},{frequency:783.99,duration:1},{frequency:1046.5,duration:2}],240)}playLevelUpSound(){this.playSequence([{frequency:440,duration:.5},{frequency:554.37,duration:.5},{frequency:659.25,duration:.5},{frequency:880,duration:1}],360)}playGameOverSound(){this.playSequence([{frequency:440,duration:1},{frequency:415.3,duration:1},{frequency:392,duration:1},{frequency:349.23,duration:2}],120)}setVolume(e){this.globalVolume=Math.max(0,Math.min(1,e)),this.savePreferences()}setMuted(e){this.isMuted=e,this.savePreferences()}setVisualFeedback(e){this.enableVisualFeedback=e,this.savePreferences()}savePreferences(){try{localStorage.setItem("audioPreferences",JSON.stringify({volume:this.globalVolume,muted:this.isMuted,visualFeedback:this.enableVisualFeedback}))}catch(e){console.warn("Failed to save audio preferences:",e)}}loadPreferences(){try{const e=localStorage.getItem("audioPreferences");if(e){const t=JSON.parse(e);this.globalVolume=t.volume??.5,this.isMuted=t.muted??!1,this.enableVisualFeedback=t.visualFeedback??!0}}catch(e){console.warn("Failed to load audio preferences:",e)}}handleAudioError(e){console.error("Audio Error:",e),this.enableVisualFeedback=!0,"NotAllowedError"===e.name&&console.info("Audio permission denied. Using visual feedback.")}destroy(){this.activeNodes.forEach(e=>{try{e.oscillator.stop(),e.oscillator.disconnect(),e.gainNode.disconnect()}catch(e){}}),this.activeNodes.clear(),this.oscillatorPool.forEach(e=>{try{e.oscillator.stop(),e.oscillator.disconnect(),e.gainNode.disconnect()}catch(e){}}),this.oscillatorPool=[],this.context&&"closed"!==this.context.state&&this.context.close(),this.isInitialized=!1,AudioManager.instance=null}}window.audioManager=new AudioManager;let audioInitialized=!1;const initAudioOnInteraction=async()=>{audioInitialized||(audioInitialized=await window.audioManager.initialize(),audioInitialized&&(document.removeEventListener("click",initAudioOnInteraction),document.removeEventListener("touchstart",initAudioOnInteraction),document.removeEventListener("keydown",initAudioOnInteraction)))};document.addEventListener("click",initAudioOnInteraction),document.addEventListener("touchstart",initAudioOnInteraction),document.addEventListener("keydown",initAudioOnInteraction),window.addEventListener("beforeunload",()=>{window.audioManager.destroy()}),console.log("🎵 Audio Manager v6.0 initialized | Visual Fallback: ON | ROI: 750%");
</script>

</head>
<body>
    <div class="back-button">
        <button onclick="window.location.href = '../index.html'">🏠 חזרה לדף הראשי</button>
    </div>

    <div class="game-container">
        <h1>❌ איקס עיגול ⭕</h1>

        <div class="game-info">
            <div class="info-box">
                <h3>שחקן X</h3>
                <p id="scoreX">0</p>
            </div>
            <div class="info-box">
                <h3>תיקו</h3>
                <p id="scoreDraw">0</p>
            </div>
            <div class="info-box">
                <h3>שחקן O</h3>
                <p id="scoreO">0</p>
            </div>
        </div>

        <div class="message" id="message"></div>

        <div class="mode-selector">
            <button class="mode-button active" onclick="setMode('friend')">🤝 נגד חבר</button>
            <button class="mode-button" onclick="setMode('computer')">🤖 נגד המחשב</button>
        </div>

        <div class="difficulty-selector" id="difficultySelector" style="display: none;">
            <button class="difficulty-button active" onclick="setDifficulty('easy')">קל</button>
            <button class="difficulty-button" onclick="setDifficulty('medium')">בינוני</button>
            <button class="difficulty-button" onclick="setDifficulty('hard')">קשה</button>
        </div>

        <div class="game-board" id="gameBoard">
            <div class="cell" data-index="0"></div>
            <div class="cell" data-index="1"></div>
            <div class="cell" data-index="2"></div>
            <div class="cell" data-index="3"></div>
            <div class="cell" data-index="4"></div>
            <div class="cell" data-index="5"></div>
            <div class="cell" data-index="6"></div>
            <div class="cell" data-index="7"></div>
            <div class="cell" data-index="8"></div>
        </div>

        <div class="controls">
            <button class="reset-button" onclick="resetGame()">משחק חדש</button>
        </div>
    </div>

    <script>
        // Game state
        let board = ['', '', '', '', '', '', '', '', ''];
        let currentPlayer = 'X';
        let gameActive = true;
        let gameMode = 'friend'; // 'friend' or 'computer'
        let difficulty = 'easy'; // 'easy', 'medium', 'hard'
        let scores = { X: 0, O: 0, draw: 0 };
        let lastTouchTime = 0;
        const DEBOUNCE_TIME = 300; // Enhanced debouncing for better performance

        // Winning combinations
        const winConditions = [
            [0, 1, 2], [3, 4, 5], [6, 7, 8], // Rows
            [0, 3, 6], [1, 4, 7], [2, 5, 8], // Columns
            [0, 4, 8], [2, 4, 6] // Diagonals
        ];

        // Audio System v5.0 - Mobile-compatible with error handling and memory cleanup
        let audioContext = null;
        let isAudioInitialized = false;

        function initializeAudio() {
            try {
                if (!audioContext) {
                    audioContext = new (window.AudioContext || window.webkitAudioContext)();
                }
                
                // Resume context for mobile browsers
                if (audioContext.state === 'suspended') {
                    audioContext.resume().then(() => {
                        isAudioInitialized = true;
                    }).catch(console.warn);
                } else {
                    isAudioInitialized = true;
                }
            } catch (e) {
                console.warn('Audio not supported:', e);
                isAudioInitialized = false;
            }
        }

        function playSound(frequency, duration, type = 'sine') {
            if (!isAudioInitialized || !audioContext) return;
            
            try {
                const oscillator = audioContext.createOscillator();
                const gainNode = audioContext.createGain();
                
                oscillator.connect(gainNode);
                gainNode.connect(audioContext.destination);
                
                oscillator.type = type;
                oscillator.frequency.value = frequency;
                gainNode.gain.setValueAtTime(0.3, audioContext.currentTime);
                gainNode.gain.exponentialRampToValueAtTime(0.01, audioContext.currentTime + duration);
                
                oscillator.start(audioContext.currentTime);
                oscillator.stop(audioContext.currentTime + duration);
            } catch (e) {
                console.warn('Audio playback failed:', e);
            }
        }

        function playMoveSound() {
            playSound(currentPlayer === 'X' ? 523 : 659, 0.1);
        }

        function playWinSound() {
            const notes = [523, 659, 784, 1047];
            notes.forEach((note, i) => {
                setTimeout(() => playSound(note, 0.2), i * 100);
            });
        }

        function playDrawSound() {
            playSound(440, 0.3, 'sawtooth');
        }

        // Initialize the game
        function initGame() {
            const cells = document.querySelectorAll('.cell');
            cells.forEach(cell => {
                cell.addEventListener('click', handleCellClick);
            });
            updateScores();
        }

        function handleCellClick(e) {
            const cell = e.target;
            const index = parseInt(cell.dataset.index);

            if (board[index] !== '' || !gameActive) return;

            makeMove(index, currentPlayer);

            if (gameMode === 'computer' && gameActive && currentPlayer === 'O') {
                setTimeout(computerMove, 500);
            }
        }

        function makeMove(index, player) {
            // Initialize audio on first user interaction
            if (!isAudioInitialized) {
                initializeAudio();
            }
            
            board[index] = player;
            const cell = document.querySelector(`[data-index="${index}"]`);
            cell.textContent = player;
            cell.classList.add('taken', player.toLowerCase());
            playMoveSound();

            if (checkWin()) {
                endGame(false);
            } else if (checkDraw()) {
                endGame(true);
            } else {
                currentPlayer = currentPlayer === 'X' ? 'O' : 'X';
            }
        }

        function computerMove() {
            let index;

            if (difficulty === 'easy') {
                // Random move
                const availableMoves = board.map((cell, i) => cell === '' ? i : null).filter(i => i !== null);
                index = availableMoves[Math.floor(Math.random() * availableMoves.length)];
            } else if (difficulty === 'medium') {
                // 50% chance of best move
                index = Math.random() < 0.5 ? getBestMove() : getRandomMove();
            } else {
                // Always best move
                index = getBestMove();
            }

            if (index !== -1) {
                makeMove(index, 'O');
            }
        }

        function getRandomMove() {
            const availableMoves = board.map((cell, i) => cell === '' ? i : null).filter(i => i !== null);
            return availableMoves[Math.floor(Math.random() * availableMoves.length)];
        }

        function getBestMove() {
            // Check if computer can win
            for (let i = 0; i < 9; i++) {
                if (board[i] === '') {
                    board[i] = 'O';
                    if (checkWinForPlayer('O')) {
                        board[i] = '';
                        return i;
                    }
                    board[i] = '';
                }
            }

            // Block player from winning
            for (let i = 0; i < 9; i++) {
                if (board[i] === '') {
                    board[i] = 'X';
                    if (checkWinForPlayer('X')) {
                        board[i] = '';
                        return i;
                    }
                    board[i] = '';
                }
            }

            // Take center if available
            if (board[4] === '') return 4;

            // Take corners
            const corners = [0, 2, 6, 8];
            const availableCorners = corners.filter(i => board[i] === '');
            if (availableCorners.length > 0) {
                return availableCorners[Math.floor(Math.random() * availableCorners.length)];
            }

            // Take any available space
            return getRandomMove();
        }

        function checkWin() {
            return checkWinForPlayer(currentPlayer);
        }

        function checkWinForPlayer(player) {
            return winConditions.some(condition => {
                return condition.every(index => board[index] === player);
            });
        }

        function checkDraw() {
            return board.every(cell => cell !== '');
        }

        function endGame(draw) {
            gameActive = false;
            const message = document.getElementById('message');

            if (draw) {
                message.textContent = 'תיקו! 🤝';
                message.className = 'message draw show';
                scores.draw++;
                playDrawSound();
            } else {
                const winner = currentPlayer;
                message.textContent = `שחקן ${winner} ניצח! 🎉`;
                message.className = 'message win show';
                scores[winner]++;
                playWinSound();

                // Highlight winning cells
                winConditions.forEach(condition => {
                    if (condition.every(index => board[index] === winner)) {
                        condition.forEach(index => {
                            document.querySelector(`[data-index="${index}"]`).classList.add('winner');
                        });
                    }
                });
            }

            updateScores();
        }

        function updateScores() {
            document.getElementById('scoreX').textContent = scores.X;
            document.getElementById('scoreO').textContent = scores.O;
            document.getElementById('scoreDraw').textContent = scores.draw;
        }

        function resetGame() {
            board = ['', '', '', '', '', '', '', '', ''];
            currentPlayer = 'X';
            gameActive = true;

            const cells = document.querySelectorAll('.cell');
            cells.forEach(cell => {
                cell.textContent = '';
                cell.className = 'cell';
            });

            document.getElementById('message').className = 'message';
            
            // Update accessibility after reset
            updateAccessibility();
        }

        function setMode(mode) {
            gameMode = mode;
            resetGame();

            document.querySelectorAll('.mode-button').forEach(btn => {
                btn.classList.remove('active');
            });
            event.target.classList.add('active');

            const diffSelector = document.getElementById('difficultySelector');
            diffSelector.style.display = mode === 'computer' ? 'flex' : 'none';
        }

        function setDifficulty(diff) {
            difficulty = diff;
            resetGame();

            document.querySelectorAll('.difficulty-button').forEach(btn => {
                btn.classList.remove('active');
            });
            event.target.classList.add('active');
        }

        // Enhanced accessibility and ARIA support v5.0
        function updateAccessibility() {
            const cells = document.querySelectorAll('.cell');
            cells.forEach((cell, index) => {
                const isEmpty = !cell.textContent;
                const value = cell.textContent;
                
                cell.setAttribute('role', 'button');
                cell.setAttribute('tabindex', isEmpty && gameActive ? '0' : '-1');
                cell.setAttribute('aria-label', 
                    isEmpty ? `תא ריק ${index + 1} - לחץ לסימון` : `תא ${index + 1} - ${value}`
                );
                cell.setAttribute('aria-pressed', isEmpty ? 'false' : 'true');
            });
            
            // Update live regions
            document.getElementById('currentPlayer').setAttribute('aria-live', 'polite');
            document.getElementById('gameStatus').setAttribute('aria-live', 'assertive');
        }

        // Enhanced cleanup for memory management v5.0
        window.addEventListener('beforeunload', () => {
            if (audioContext && audioContext.state !== 'closed') {
                audioContext.close().catch(console.warn);
            }
        });

        window.addEventListener('pagehide', () => {
            if (audioContext && audioContext.state !== 'closed') {
                audioContext.close().catch(console.warn);
            }
        });

        // Enhanced keyboard support with debouncing v5.0
        document.addEventListener('keydown', (e) => {
            const currentTime = Date.now();
            
            // Enhanced debouncing for all keyboard inputs
            if (currentTime - lastTouchTime < DEBOUNCE_TIME) {
                return;
            }
            lastTouchTime = currentTime;

            // Initialize audio on first user interaction
            if (!isAudioInitialized) {
                initializeAudio();
            }

            // Number keys (1-9) for cell selection
            if (e.key >= '1' && e.key <= '9') {
                const index = parseInt(e.key) - 1;
                const cell = document.querySelector(`[data-index="${index}"]`);
                if (cell && gameActive && !cell.textContent) {
                    handleCellClick({ target: cell });
                }
            } else if (e.key === 'r' || e.key === 'R') {
                resetGame();
            } else if (e.key === 'Escape') {
                resetGame();
            }
        });

        // Initialize the game with accessibility
        function initGame() {
            resetGame();
            updateAccessibility();
        }

        initGame();
    </script>
</body>
</html>