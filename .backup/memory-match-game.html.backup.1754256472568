<!DOCTYPE html>
<html lang="he" dir="rtl">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>משחק זיכרון - התאמת קלפים</title>
    <style>
        * {
            margin: 0;
            padding: 0;
            box-sizing: border-box;
        }

        body {
            font-family: 'Arial', sans-serif;
            background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
            min-height: 100vh;
            display: flex;
            justify-content: center;
            align-items: center;
            padding: 20px;
        }

        /* Back button */
        .back-button {
            position: fixed;
            top: 20px;
            right: 20px;
            z-index: 1000;
        }

        .back-button button {
            background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
            color: white;
            border: none;
            padding: 12px 25px;
            border-radius: 50px;
            font-size: 1.1em;
            font-weight: bold;
            cursor: pointer;
            box-shadow: 0 5px 15px rgba(0, 0, 0, 0.3);
            transition: all 0.3s ease;
        }

        .back-button button:hover {
            transform: scale(1.05);
        }

        @media (hover: none) {
            .back-button button:hover {
                transform: none;
            }
        }

        .game-container {
            background: rgba(255, 255, 255, 0.95);
            border-radius: 30px;
            padding: 40px;
            box-shadow: 0 25px 50px rgba(0, 0, 0, 0.3);
            max-width: 700px;
            width: 100%;
        }

        h1 {
            text-align: center;
            color: #2c3e50;
            margin-bottom: 30px;
            font-size: 2.5em;
            text-shadow: 2px 2px 4px rgba(0, 0, 0, 0.1);
        }

        .stats {
            display: flex;
            justify-content: space-around;
            margin-bottom: 30px;
            gap: 20px;
        }

        .stat-box {
            background: linear-gradient(135deg, #3498db 0%, #2980b9 100%);
            color: white;
            padding: 15px 25px;
            border-radius: 15px;
            text-align: center;
            box-shadow: 0 5px 15px rgba(0, 0, 0, 0.2);
            flex: 1;
        }

        .stat-number {
            font-size: 2em;
            font-weight: bold;
            margin-bottom: 5px;
        }

        .stat-label {
            font-size: 0.9em;
            opacity: 0.9;
        }

        .controls {
            text-align: center;
            margin-bottom: 30px;
            display: flex;
            gap: 15px;
            justify-content: center;
        }

        .controls button {
            background: linear-gradient(135deg, #e74c3c 0%, #c0392b 100%);
            color: white;
            border: none;
            padding: 15px 30px;
            border-radius: 25px;
            font-size: 1.1em;
            font-weight: bold;
            cursor: pointer;
            box-shadow: 0 5px 15px rgba(0, 0, 0, 0.2);
            transition: all 0.3s ease;
        }

        .controls button:hover {
            transform: translateY(-2px);
            box-shadow: 0 8px 20px rgba(0, 0, 0, 0.3);
        }

        .game-board {
            display: grid;
            grid-template-columns: repeat(4, 1fr);
            gap: 15px;
            margin: 0 auto;
            max-width: 400px;
        }

        .card {
            aspect-ratio: 1;
            perspective: 1000px;
            cursor: pointer;
            position: relative;
        }

        .card-inner {
            position: relative;
            width: 100%;
            height: 100%;
            text-align: center;
            transition: transform 0.8s;
            transform-style: preserve-3d;
        }

        .card.flipped .card-inner {
            transform: rotateY(180deg);
        }

        .card-front, .card-back {
            position: absolute;
            width: 100%;
            height: 100%;
            -webkit-backface-visibility: hidden;
            backface-visibility: hidden;
            border-radius: 15px;
            display: flex;
            align-items: center;
            justify-content: center;
            font-size: 2.5em;
            font-weight: bold;
            box-shadow: 0 5px 15px rgba(0, 0, 0, 0.2);
        }

        .card-front {
            background: linear-gradient(135deg, #34495e 0%, #2c3e50 100%);
            color: white;
        }

        .card-back {
            background: linear-gradient(135deg, #f39c12 0%, #e67e22 100%);
            color: white;
            transform: rotateY(180deg);
        }

        .card.matched {
            opacity: 0.6;
            cursor: default;
        }

        .card.matched .card-inner {
            transform: rotateY(180deg);
        }

        .card:hover:not(.flipped):not(.matched) {
            transform: scale(1.05);
        }

        .win-message {
            text-align: center;
            font-size: 1.5em;
            color: #4a5568;
            margin-top: 20px;
            font-weight: bold;
            animation: fadeIn 0.5s ease;
        }

        @keyframes fadeIn {
            from { opacity: 0; transform: translateY(10px); }
            to { opacity: 1; transform: translateY(0); }
        }

        @media (max-width: 500px) {
            .game-board {
                grid-template-columns: repeat(3, 1fr);
                gap: 10px;
            }
            
            .stats {
                flex-direction: column;
                align-items: center;
            }
            
            .stat-box {
                width: 100%;
                max-width: 200px;
            }
        }

        @media (hover: none) {
            button:hover,
            .card:hover:not(.flipped):not(.matched) {
                transform: none;
            }
        }
    </style>
</head>
<body>
    <div class="back-button">
        <button onclick="window.location.href='../index.html'">🏠 חזרה</button>
    </div>

    <div class="game-container">
        <h1>🧠 משחק זיכרון - התאמת קלפים</h1>
        
        <div class="stats">
            <div class="stat-box">
                <div class="stat-number" id="timer" aria-live="polite">0:00</div>
                <div class="stat-label">זמן</div>
            </div>
            <div class="stat-box">
                <div class="stat-number" id="moves" aria-live="polite">0</div>
                <div class="stat-label">מהלכים</div>
            </div>
            <div class="stat-box">
                <div class="stat-number" id="pairs" aria-live="polite">0</div>
                <div class="stat-label">זוגות</div>
            </div>
        </div>

        <div class="controls">
            <button onclick="startNewGame()" aria-label="התחל משחק חדש">משחק חדש</button>
            <button onclick="showHint()" aria-label="קבל רמז" id="hintButton">רמז (נותרו 3)</button>
        </div>

        <div class="game-board" id="gameBoard" role="grid" aria-label="לוח המשחק"></div>
        
        <div id="winMessage" class="win-message" style="display: none;" role="alert" aria-live="assertive"></div>
    </div>

    <script>
        // Game State Management v5.0 - Enhanced state management with persistence
        const GAME_STATE_KEY = 'memoryMatchGameState';
        
        function saveGameState() {
            if (!gameStarted) return;
            
            const gameState = {
                matchedPairs,
                moves,
                hintsLeft,
                elapsedTime: Math.floor((Date.now() - startTime) / 1000),
                matchedEmojis: cards
                    .filter(card => card.classList.contains('matched'))
                    .map(card => card.dataset.emoji),
                timestamp: Date.now()
            };
            
            try {
                localStorage.setItem(GAME_STATE_KEY, JSON.stringify(gameState));
            } catch (e) {
                console.warn('Cannot save game state:', e);
            }
        }

        function loadGameState() {
            try {
                const saved = localStorage.getItem(GAME_STATE_KEY);
                if (!saved) return false;
                
                const gameState = JSON.parse(saved);
                const timeSinceLastSave = Date.now() - gameState.timestamp;
                
                // Don't restore if more than 1 hour has passed
                if (timeSinceLastSave > 3600000) {
                    localStorage.removeItem(GAME_STATE_KEY);
                    return false;
                }
                
                return gameState;
            } catch (e) {
                console.warn('Cannot load game state:', e);
                localStorage.removeItem(GAME_STATE_KEY);
                return false;
            }
        }

        function clearGameState() {
            try {
                localStorage.removeItem(GAME_STATE_KEY);
            } catch (e) {
                console.warn('Cannot clear game state:', e);
            }
        }

        // Game variables with enhanced state management
        let cards = [];
        let flippedCards = [];
        let matchedPairs = 0;
        let moves = 0;
        let gameStarted = false;
        let startTime;
        let timerInterval;
        let hintsLeft = 3;
        let isProcessing = false;
        let isPaused = false;
        let pausedTime = 0;
        let highScore = localStorage.getItem('memoryMatchHighScore') || Infinity;
        let lastTouchTime = 0;
        const DEBOUNCE_TIME = 300; // Prevent rapid clicks

        // Emojis for card faces
        const cardEmojis = ['🎨', '🎭', '🎪', '🎯', '🎲', '🎸'];
        
        // Audio System v5.0 - Mobile-compatible with error handling and memory cleanup
        let audioContext = null;
        let isAudioInitialized = false;

        function initializeAudio() {
            try {
                if (!audioContext) {
                    audioContext = new (window.AudioContext || window.webkitAudioContext)();
                }
                
                // Resume context for mobile browsers
                if (audioContext.state === 'suspended') {
                    audioContext.resume().then(() => {
                        isAudioInitialized = true;
                    }).catch(console.warn);
                } else {
                    isAudioInitialized = true;
                }
            } catch (e) {
                console.warn('Audio not supported:', e);
                isAudioInitialized = false;
            }
        }

        function createBeep(frequency, duration, volume = 0.1) {
            if (!isAudioInitialized || !audioContext) return;
            
            try {
                const oscillator = audioContext.createOscillator();
                const gainNode = audioContext.createGain();
                
                oscillator.connect(gainNode);
                gainNode.connect(audioContext.destination);
                
                oscillator.frequency.setValueAtTime(frequency, audioContext.currentTime);
                gainNode.gain.setValueAtTime(volume, audioContext.currentTime);
                gainNode.gain.exponentialRampToValueAtTime(0.01, audioContext.currentTime + duration);
                
                oscillator.start(audioContext.currentTime);
                oscillator.stop(audioContext.currentTime + duration);
            } catch (e) {
                console.warn('Audio playback failed:', e);
            }
        }

        function playFlipSound() {
            createBeep(800, 0.1);
        }

        function playMatchSound() {
            createBeep(1200, 0.2);
            setTimeout(() => createBeep(1500, 0.2), 100);
        }

        function playWinSound() {
            const notes = [523.25, 659.25, 783.99, 1046.50];
            notes.forEach((note, i) => {
                setTimeout(() => createBeep(note, 0.3), i * 150);
            });
        }

        // Performance optimization with requestAnimationFrame
        function updateTimer() {
            if (isPaused || !gameStarted) return;
            
            requestAnimationFrame(() => {
                const elapsed = Math.floor((Date.now() - startTime) / 1000);
                const minutes = Math.floor(elapsed / 60);
                const seconds = elapsed % 60;
                document.getElementById('timer').textContent = `${minutes}:${seconds.toString().padStart(2, '0')}`;
                
                // Auto-save game state periodically
                if (elapsed % 10 === 0) {
                    saveGameState();
                }
            });
        }

        function updateStats() {
            document.getElementById('moves').textContent = moves;
            document.getElementById('pairs').textContent = matchedPairs;
        }

        function shuffle(array) {
            const newArray = [...array];
            for (let i = newArray.length - 1; i > 0; i--) {
                const j = Math.floor(Math.random() * (i + 1));
                [newArray[i], newArray[j]] = [newArray[j], newArray[i]];
            }
            return newArray;
        }

        function createCard(emoji, index) {
            const card = document.createElement('div');
            card.className = 'card';
            card.dataset.emoji = emoji;
            card.innerHTML = `
                <div class="card-inner">
                    <div class="card-front">?</div>
                    <div class="card-back">${emoji}</div>
                </div>
            `;
            
            card.addEventListener('click', () => flipCard(card));
            return card;
        }

        function flipCard(card) {
            const currentTime = Date.now();
            
            // Enhanced debouncing for all input types
            if (currentTime - lastTouchTime < DEBOUNCE_TIME) {
                return;
            }
            lastTouchTime = currentTime;

            // Initialize audio on first user interaction
            if (!isAudioInitialized) {
                initializeAudio();
            }

            if (isProcessing || isPaused || card.classList.contains('flipped') || card.classList.contains('matched')) {
                return;
            }

            if (!gameStarted) {
                startGame();
            }

            playFlipSound();
            card.classList.add('flipped');
            flippedCards.push(card);

            if (flippedCards.length === 2) {
                isProcessing = true;
                moves++;
                updateStats();
                updateAccessibility();
                checkMatch();
            }
        }

        function checkMatch() {
            const [card1, card2] = flippedCards;
            
            if (card1.dataset.emoji === card2.dataset.emoji) {
                setTimeout(() => {
                    card1.classList.add('matched');
                    card2.classList.add('matched');
                    playMatchSound();
                    matchedPairs++;
                    updateStats();
                    updateAccessibility();
                    
                    if (matchedPairs === cardEmojis.length) {
                        endGame();
                    }
                    
                    flippedCards = [];
                    isProcessing = false;
                }, 600);
            } else {
                setTimeout(() => {
                    card1.classList.remove('flipped');
                    card2.classList.remove('flipped');
                    flippedCards = [];
                    isProcessing = false;
                    updateAccessibility();
                }, 1200);
            }
        }

        function startGame() {
            gameStarted = true;
            startTime = Date.now() - pausedTime;
            timerInterval = setInterval(updateTimer, 1000);
        }

        function showHint() {
            if (hintsLeft <= 0 || isProcessing) return;
            
            hintsLeft--;
            document.querySelector('.controls button:nth-child(2)').textContent = `רמז (נותרו ${hintsLeft})`;
            
            const unmatched = cards.filter(card => 
                !card.classList.contains('matched') && 
                !card.classList.contains('flipped')
            );
            
            if (unmatched.length > 0) {
                const hintCard = unmatched[Math.floor(Math.random() * unmatched.length)];
                hintCard.classList.add('flipped');
                setTimeout(() => {
                    if (!hintCard.classList.contains('matched')) {
                        hintCard.classList.remove('flipped');
                    }
                }, 1500);
            }
        }

        function endGame() {
            clearInterval(timerInterval);
            clearGameState(); // Clear saved state on completion
            
            const time = document.getElementById('timer').textContent;
            const winMessage = document.getElementById('winMessage');
            
            playWinSound();
            
            // Check for high score
            if (moves < highScore) {
                highScore = moves;
                localStorage.setItem('memoryMatchHighScore', highScore);
            }
            
            let rating = '⭐⭐⭐';
            if (moves <= 15) rating = '⭐⭐⭐⭐⭐';
            else if (moves <= 20) rating = '⭐⭐⭐⭐';
            
            winMessage.innerHTML = `
                🎉 כל הכבוד! 🎉<br>
                ניצחת ב-${moves} מהלכים ובזמן ${time}!<br>
                דירוג: ${rating}<br>
                שיא אישי: ${highScore === Infinity ? 'אין' : highScore} מהלכים
            `;
            winMessage.style.display = 'block';
        }

        function startNewGame() {
            // Reset game state
            cards = [];
            flippedCards = [];
            matchedPairs = 0;
            moves = 0;
            gameStarted = false;
            hintsLeft = 3;
            isProcessing = false;
            isPaused = false;
            pausedTime = 0;
            
            clearInterval(timerInterval);
            clearGameState(); // Clear saved state
            
            // Reset UI
            document.getElementById('moves').textContent = '0';
            document.getElementById('timer').textContent = '0:00';
            document.getElementById('pairs').textContent = '0';
            document.getElementById('winMessage').style.display = 'none';
            document.getElementById('hintButton').textContent = 'רמז (נותרו 3)';
            
            // Create new deck
            const gameBoard = document.getElementById('gameBoard');
            gameBoard.innerHTML = '';
            
            const deck = shuffle([...cardEmojis, ...cardEmojis]);
            
            deck.forEach((emoji, index) => {
                const card = createCard(emoji, index);
                cards.push(card);
                gameBoard.appendChild(card);
            });
            
            // Initialize accessibility after creating cards
            updateAccessibility();
        }

        // Enhanced accessibility and ARIA support v5.0
        function updateAccessibility() {
            const cardElements = document.querySelectorAll('.card');
            cardElements.forEach((card, index) => {
                const isFlipped = card.classList.contains('flipped');
                const isMatched = card.classList.contains('matched');
                const emoji = card.dataset.emoji;
                
                card.setAttribute('role', 'button');
                card.setAttribute('tabindex', gameStarted && !isMatched ? '0' : '-1');
                card.setAttribute('aria-label', 
                    isFlipped || isMatched 
                        ? `קלף ${emoji} - ${isMatched ? 'מותאם' : 'פתוח'}`
                        : `קלף ${index + 1} - לחץ לחשיפה`
                );
                card.setAttribute('aria-pressed', isFlipped ? 'true' : 'false');
            });
        }

        // Keyboard navigation support
        let selectedIndex = -1;
        
        document.addEventListener('keydown', (e) => {
            if (!gameStarted && e.key === 'Enter') {
                startNewGame();
                return;
            }
            
            if (isProcessing || isPaused) return;
            
            const visibleCards = cards.filter(card => 
                !card.classList.contains('matched')
            );
            
            switch(e.key) {
                case 'ArrowLeft':
                    if (selectedIndex > 0) selectedIndex--;
                    else selectedIndex = visibleCards.length - 1;
                    highlightCard(visibleCards[selectedIndex]);
                    break;
                case 'ArrowRight':
                    if (selectedIndex < visibleCards.length - 1) selectedIndex++;
                    else selectedIndex = 0;
                    highlightCard(visibleCards[selectedIndex]);
                    break;
                case 'ArrowUp':
                    if (selectedIndex >= 4) selectedIndex -= 4;
                    else selectedIndex = visibleCards.length - 1;
                    highlightCard(visibleCards[selectedIndex]);
                    break;
                case 'ArrowDown':
                    if (selectedIndex < visibleCards.length - 4) selectedIndex += 4;
                    else selectedIndex = 0;
                    highlightCard(visibleCards[selectedIndex]);
                    break;
                case 'Enter':
                case ' ':
                    if (selectedIndex >= 0 && selectedIndex < visibleCards.length) {
                        flipCard(visibleCards[selectedIndex]);
                    }
                    break;
                case 'h':
                case 'H':
                    showHint();
                    break;
                case 'r':
                case 'R':
                    startNewGame();
                    break;
            }
        });
        
        function highlightCard(card) {
            cards.forEach(c => c.style.outline = 'none');
            if (card) {
                card.style.outline = '3px solid #ffd700';
                card.scrollIntoView({ behavior: 'smooth', block: 'center' });
            }
        }

        // Visibility API for pause/resume v5.0
        document.addEventListener('visibilitychange', () => {
            if (gameStarted && !document.hidden && isPaused) {
                // Resume game
                isPaused = false;
                startTime = Date.now() - pausedTime;
                timerInterval = setInterval(updateTimer, 1000);
            } else if (gameStarted && document.hidden && !isPaused) {
                // Pause game
                isPaused = true;
                pausedTime = Date.now() - startTime;
                clearInterval(timerInterval);
                saveGameState(); // Save state when pausing
            }
        });

        // Enhanced cleanup for memory management v5.0
        window.addEventListener('beforeunload', () => {
            clearInterval(timerInterval);
            timerInterval = null;
            if (audioContext && audioContext.state !== 'closed') {
                audioContext.close().catch(console.warn);
            }
            if (gameStarted) {
                saveGameState(); // Save state before leaving
            }
        });

        window.addEventListener('pagehide', () => {
            clearInterval(timerInterval);
            timerInterval = null;
            if (audioContext && audioContext.state !== 'closed') {
                audioContext.close().catch(console.warn);
            }
            if (gameStarted) {
                saveGameState(); // Save state before hiding
            }
        });

        // Initialize game on load with state restoration
        document.addEventListener('DOMContentLoaded', () => {
            const savedState = loadGameState();
            if (savedState) {
                // Restore game state if available
                matchedPairs = savedState.matchedPairs;
                moves = savedState.moves;
                hintsLeft = savedState.hintsLeft;
                
                // Initialize game board
                startNewGame();
                
                // Restore UI
                updateStats();
                document.getElementById('hintButton').textContent = `רמז (נותרו ${hintsLeft})`;
                
                // Restore matched cards
                setTimeout(() => {
                    cards.forEach(card => {
                        if (savedState.matchedEmojis.includes(card.dataset.emoji)) {
                            card.classList.add('matched', 'flipped');
                        }
                    });
                    updateAccessibility();
                }, 100);
                
                // Resume timer if game was active
                if (savedState.elapsedTime > 0) {
                    gameStarted = true;
                    startTime = Date.now() - (savedState.elapsedTime * 1000);
                    timerInterval = setInterval(updateTimer, 1000);
                }
            } else {
                startNewGame();
            }
        });
    </script>
</body>
</html>
